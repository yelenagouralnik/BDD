<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>bddbooks-discovery</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 30pt; }
 .s2 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; vertical-align: 13pt; }
 .s3 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s4 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 31pt; }
 .s5 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 31.5pt; }
 .s6 { color: #231F1F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 31pt; }
 .s7 { color: #231F1F; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 48pt; }
 .s8 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 36.5pt; }
 .s9 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 37.5pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 36pt; }
 .s11 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 22pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 17pt; }
 .s13 { color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 17pt; }
 .s14 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 17pt; }
 .p, p { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; margin:0pt; }
 .s15 { color: #009; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s16 { color: #009; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 h1 { color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 24.5pt; }
 .s18 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s19 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s20 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s21 { color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s22 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s23 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h2 { color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 .a, a { color: #009; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s25 { color: #009; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s26 { color: #009; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s28 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s29 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s30 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s31 { color: #009; font-family:"Times New Roman", serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s32 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s33 { color: #007F00; font-family:"Courier New", monospace; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s34 { color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s35 { color: #009; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s36 { color: #009; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s37 { color: #009; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s38 { color: #009; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h3 { color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s41 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 11pt; }
 li {display: block; }
 #l1 {padding-left: 0pt;counter-reset: c1 1; }
 #l1> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l1> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 #l2 {padding-left: 0pt;counter-reset: c2 2; }
 #l2> li>*:first-child:before {counter-increment: c2; content: counter(c1, decimal)"."counter(c2, decimal)" "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: c2 0;  }
 li {display: block; }
 #l3 {padding-left: 0pt;counter-reset: d1 2; }
 #l3> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l3> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l4 {padding-left: 0pt;counter-reset: d2 1; }
 #l4> li>*:first-child:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: d2 0;  }
 li {display: block; }
 #l5 {padding-left: 0pt;counter-reset: e1 3; }
 #l5> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l5> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 #l6 {padding-left: 0pt;counter-reset: e2 1; }
 #l6> li>*:first-child:before {counter-increment: e2; content: counter(e1, decimal)"."counter(e2, decimal)" "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: e2 0;  }
 li {display: block; }
 #l7 {padding-left: 0pt;counter-reset: f1 4; }
 #l7> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l7> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 #l8 {padding-left: 0pt;counter-reset: f2 1; }
 #l8> li>*:first-child:before {counter-increment: f2; content: counter(f1, decimal)"."counter(f2, decimal)" "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: f2 0;  }
 li {display: block; }
 #l9 {padding-left: 0pt;counter-reset: g1 5; }
 #l9> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l9> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l10 {padding-left: 0pt;counter-reset: g2 1; }
 #l10> li>*:first-child:before {counter-increment: g2; content: counter(g1, decimal)"."counter(g2, decimal)" "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 li {display: block; }
 #l11 {padding-left: 0pt; }
 #l11> li>*:first-child:before {content: "– "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l12 {padding-left: 0pt; }
 #l12> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l13 {padding-left: 0pt;counter-reset: i1 1; }
 #l13> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l13> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l14 {padding-left: 0pt;counter-reset: i2 1; }
 #l14> li>*:first-child:before {counter-increment: i2; content: counter(i1, decimal)"."counter(i2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 #l15 {padding-left: 0pt;counter-reset: i1 1; }
 #l15> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l15> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 #l16 {padding-left: 0pt;counter-reset: i2 3; }
 #l16> li>*:first-child:before {counter-increment: i2; content: counter(i1, decimal)"."counter(i2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: i2 0;  }
 #l17 {padding-left: 0pt; }
 #l17> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l18 {padding-left: 0pt;counter-reset: j1 2; }
 #l18> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l18> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l19 {padding-left: 0pt;counter-reset: j2 1; }
 #l19> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l20 {padding-left: 0pt;counter-reset: j1 2; }
 #l20> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l20> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 #l21 {padding-left: 0pt;counter-reset: j2 2; }
 #l21> li>*:first-child:before {counter-increment: j2; content: counter(j1, decimal)"."counter(j2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: j2 0;  }
 #l22 {padding-left: 0pt; }
 #l22> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l23 {padding-left: 0pt; }
 #l23> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l24 {padding-left: 0pt;counter-reset: k1 3; }
 #l24> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l24> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l25 {padding-left: 0pt;counter-reset: k2 1; }
 #l25> li>*:first-child:before {counter-increment: k2; content: counter(k1, decimal)"."counter(k2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: k2 0;  }
 #l26 {padding-left: 0pt;counter-reset: l1 4; }
 #l26> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l26> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 #l27 {padding-left: 0pt;counter-reset: l2 1; }
 #l27> li>*:first-child:before {counter-increment: l2; content: counter(l1, decimal)"."counter(l2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l27> li:first-child>*:first-child:before {counter-increment: l2 0;  }
 #l28 {padding-left: 0pt; }
 #l28> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l29 {padding-left: 0pt; }
 #l29> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l30 {padding-left: 0pt; }
 #l30> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l31 {padding-left: 0pt;counter-reset: m1 5; }
 #l31> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l31> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l32 {padding-left: 0pt;counter-reset: m2 1; }
 #l32> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l32> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l33 {padding-left: 0pt; }
 #l33> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l34 {padding-left: 0pt; }
 #l34> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l35 {padding-left: 0pt;counter-reset: m1 5; }
 #l35> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l35> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l36 {padding-left: 0pt;counter-reset: m2 1; }
 #l36> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l36> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l37 {padding-left: 0pt;counter-reset: m3 1; }
 #l37> li>*:first-child:before {counter-increment: m3; content: counter(m3, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l37> li:first-child>*:first-child:before {counter-increment: m3 0;  }
 #l38 {padding-left: 0pt;counter-reset: m1 5; }
 #l38> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l38> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l39 {padding-left: 0pt;counter-reset: m2 3; }
 #l39> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l39> li:first-child>*:first-child:before {counter-increment: m2 0;  }
 #l40 {padding-left: 0pt; }
 #l40> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l41 {padding-left: 0pt;counter-reset: m1 5; }
 #l41> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l41> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 #l42 {padding-left: 0pt;counter-reset: m2 4; }
 #l42> li>*:first-child:before {counter-increment: m2; content: counter(m1, decimal)"."counter(m2, decimal)" "; color: black; font-family:"Open Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 17pt; }
 #l42> li:first-child>*:first-child:before {counter-increment: m2 0;  }
</style></head><body><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-top: 3pt;padding-bottom: 3pt;text-indent: 0pt;text-align: right;">&#39;l<span class="s2">1</span><span class="s3"> </span>II I  111)1) <span class="s4">llf)f)l{S</span></p><p style="padding-left: 181pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="49" height="1" alt="image" src="Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="517" height="82" alt="image" src="Image_002.jpg"/></span></p><p class="s5" style="text-indent: 0pt;text-align: right;">Explore behaviour us1n1 examples</p><p class="s6" style="padding-top: 22pt;text-indent: 0pt;text-align: center;">N</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="426" height="312" alt="image" src="Image_003.jpg"/></span></p><p class="s7" style="text-indent: 0pt;line-height: 53pt;text-align: left;">s</p><p style="text-indent: 0pt;text-align: left;"/><p class="s8" style="padding-top: 12pt;padding-left: 239pt;text-indent: 0pt;text-align: left;">Gispir <span class="s9">tlaay</span></p><p class="s10" style="padding-left: 228pt;text-indent: 0pt;line-height: 40pt;text-align: left;">and Seb Rose</p><p class="s11" style="padding-left: 183pt;text-indent: 0pt;line-height: 24pt;text-align: left;">Foreword <span class="s12">by </span>Johanna Rothman</p><p class="s13" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Explore behaviour using examples</p><p class="s14" style="padding-top: 15pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Gáspár Nagy and Seb Rose</p><p class="s16" style="padding-top: 13pt;padding-left: 6pt;text-indent: 0pt;line-height: 206%;text-align: left;"><a href="http://leanpub.com/bddbooks-discovery" class="s19" target="_blank">This book is for sale at </a>http://leanpub.com/bddbooks-discovery <span style=" color: #000;">This version was published on 2018-02-23</span></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="76" height="59" alt="image" src="Image_004.png"/></span></p><p class="s16" style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="http://leanpub.com/" class="s19" target="_blank">This is a </a>Leanpub <a href="http://leanpub.com/manifesto" class="s19" target="_blank">book. Leanpub empowers authors and publishers with the Lean Publishing process. </a>Lean Publishing <span style=" color: #000;">is the act of publishing an in-progress ebook using lightweight tools and many iterations to get reader feedback, pivot until you have the right book and build traction once you do.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">© 2017 - 2018 Gáspár Nagy and Seb Rose</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="http://twitter.com/" class="s19" target="_blank">Please help Gáspár Nagy and Seb Rose by spreading the word about this book on </a>Twitter<span style=" color: #000;">!</span></p><p class="s16" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="https://twitter.com/search?q=%23bddbooks" class="s19" target="_blank">The suggested hashtag for this book is </a>#bddbooks<span style=" color: #000;">.</span></p><p style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Find out what other people are saying about the book by clicking on this link to search for this hashtag on Twitter:</p><p style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="https://twitter.com/search?q=%23bddbooks" class="s15">#bddbooks</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark0">Contents</a></h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="text-indent: 0pt;text-align: right;">Foreword <span class="p">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span>1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="text-indent: 0pt;text-align: right;">Preface <span class="p">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span>3</p><p style="text-indent: 0pt;text-align: right;">Who this book is for . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5</p><p style="text-indent: 0pt;text-align: right;">Why you should listen to us . . . . . . . . . . . . . . . . . . . . . . . . . 5</p><p style="text-indent: 0pt;text-align: right;">Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6</p><p style="text-indent: 0pt;text-align: right;">How this book series is organised . . . . . . . . . . . . . . . . . . . . . . 6</p><p style="text-indent: 0pt;text-align: right;">What is not in this book . . . . . . . . . . . . . . . . . . . . . . . . . . . 7</p><p style="text-indent: 0pt;text-align: right;">Online resources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="text-indent: 0pt;text-align: right;">Chapter 1 – What is BDD? <span class="p">. . . . . . . . . . . . . . . . . . . . . . . . . . . </span>8</p><p style="text-indent: 0pt;text-align: right;">1.1 – The missing link . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8</p><ol id="l1"><ol id="l2"><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– How does BDD work? 12</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– What about testing? 15</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– A language that is understood by everyone 17</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Living documentation 18</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– What is BDD, then? 19</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– What we just learned 21</p></li></ol></ol><p class="s18" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Chapter 2 – Structured conversation 23</p><ol id="l3"><ol id="l4"><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Where is my pizza? 23</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– A useful meeting 23</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Collecting examples 26</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Deliberate discovery 34</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Example Mapping in a nutshell 34</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– How to establish structured conversations 37</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– What we just learned 41</p></li></ol></ol><p class="s20" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">CONTENTS</p><p class="s18" style="padding-top: 20pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Chapter 3 – What is an example? 43</p><ol id="l5"><ol id="l6"><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– How hard is concrete? 43</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Is all that concrete essential? 44</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– How many examples do we need? 45</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Why stop now? 47</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Rules vs. examples 48</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– My example illustrates multiple rules! 49</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– The bigger picture 51</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– What we just learned 52</p></li></ol></ol><p class="s18" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Chapter 4 – Who does what and when 53</p><ol id="l7"><ol id="l8"><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– The BDD approach 53</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– BDD in Scrum 59</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– BDD in Lean/Kanban 64</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;"><a href="#bookmark134" class="s19">– BDD in Distributed </a>Teams 65</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– BDD in fixed scope projects 68</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– BDD in regulated environments 70</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– What we just learned 72</p></li></ol></ol><p class="s18" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Chapter 5 – How to get business involved 73</p><ol id="l9"><ol id="l10"><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– Learn from you peers 73</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– The one where the business is not involved 74</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– BDD is for solving problems 76</p></li><li><p style="padding-left: 43pt;text-indent: -16pt;text-align: left;">– What we just learned 84</p></li></ol></ol><p class="s18" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">What’s next 85</p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;">Where are we now? 85</p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;">What’s more is there? 85</p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;">How else we can help 86</p><p class="s18" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Index 87</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark1">Foreword</a><a name="bookmark2">&zwnj;</a></h1><p class="s21" style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">by Johanna Rothman</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">As a consultant, I see agile projects in trouble. Why? Because the requirements mean one thing to one person and another thing to other people. The team, the product owner, the business people – all of them have a different perspective on what the requirements are and what they mean.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Those people need this book.</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In my 40+ years of experience, I’ve heard, “We’ll know what’s in here once we ship.” Or, “It’s not done if the whole thing isn’t done.” Or, “Let’s get the bones of this requirement in and refine it later.”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Those sayings weren’t horrible. However, I’ve seen teams veer off in various direc- tions that the customers didn’t want or need, or that the product manager/owners didn’t want. These teams (and others) suffered from the same problem: We didn’t have examples to understand the requirements.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When we have examples, we – all of us, team members, product owners, business people, managers of all stripes – can discuss the reality of the work. Without examples, we flounder. Worse, we don’t just delay the delivery of valuable features, we even implement the wrong work. We don’t receive feedback early enough.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">This book can change that for you. By defining the <i>behaviours </i>of your product, by creating, refining and using examples, your team can get faster feedback and deliver the product your customers need.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Gáspár and Seb guide you through thinking and practicing the Discovery part of BDD in this book: how to discover the requirements. They explain how Discovery is followed by Formulation (turning the examples into scenarios) and Automation (using the scenarios to test the behaviour).</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">It sounds easy to say. It’s challenging to do, only because we often don’t think of doing these three steps in this order.</p><p class="s20" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Foreword <span class="p">2</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">One of the problems I see in teams is that, too often, the Product Owner (or some responsible person) is an order-taker from other people. The PO doesn’t always understand the requirement itself. BDD can help expose that problem through the collaborative conversations.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Or, sometimes, the team is supposed to be like a short-order cook, taking the requirements from the PO without conversations. That rarely works, and this book has an entire chapter on how to build the requirements through conversations.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Some of my clients are a little stuck on rules, examples, acceptance criteria and how to use them properly. Gáspár and Seb devote one chapter to explaining what the examples are and how to frame them. I appreciate the positive way of structuring examples, even on the paths you want to prevent people from exploring in your product.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">There’s a chapter that addresses who does what and when. Because agile approaches are a system, it’s not a flow chart – Gáspár and Seb created a diagram that shows how the various practices that make up the BDD approach interact. They emphasize that business review of the team’s work is needed and clarify how BDD practices tie into implementation and refactoring. They also explain how you might have additional tests and when you might release.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The last chapters discuss how to use BDD in almost any project – not just agile approaches – and how to involve your business partners.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Read this book to start using BDD effectively. You, your team, your customers and your managers will all be glad you did. I can’t wait for the next book!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="padding-top: 9pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Johanna Rothman</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;line-height: 148%;text-align: left;">consultant, author, and speaker Arlington, Massachusetts</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 13pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark3">Preface</a><a name="bookmark10">&zwnj;</a></h1><p style="padding-top: 15pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Behaviour Driven Development (BDD) is an agile approach to software development that insists that detailed requirements for a feature should be defined collaboratively by the business and delivery teams. The output of this collaboration is documented using business terminology that can be understood unambiguously. Finally, the documentation is structured in a way that enables it to act as automated tests that verify that the system behaves as intended. This book explores, in detail, the collaborative aspect of BDD.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">BDD has been proven to be successful in thousands of projects around the world, on different platforms, in diverse industries and various project sizes. BDD is based on a set of practices that originate from the experience of many people over many years, working to <i>uncover better ways of delivering software</i>. However, there is a learning period (or more accurately, a practicing period) for BDD, so it will take some time before you start seeing a return on your investment.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We belong to the second generation of the software industry (we could call ourselves Generation Y - there are a lot of similarities). We don’t believe in buzzwords or well- named methodologies, but we like to try them out to see if they work. So, if you try out BDD, how can you decide if it has worked or not?</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The first indicator you are likely to notice is a reduction in <i><b>cycle time</b></i>. The shared understanding that is gained during collaborative requirement definition sessions ensures a smooth flow from definition to delivery. If a developer or a tester discovers an ambiguity in a requirement once they have started working on it, they’ll need to resolve it. This interrupts their work, as well as the work of any colleague that they ask to help. The elimination of interruptions and context switches leads to a more efficient, more predictable delivery process.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Another visible indicator is a reduction in the number of production issues. Although it is very hard to gather scientific evidence of this (because it is hard to find a “control project”), we have seen significantly fewer production issues in projects that have successfully adopted a BDD approach. For a broad review of outcomes, from a wide</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="s19">variety of teams, you can’t do better than reading Gojko Adzic’s “Specification By Example” </a>¹<span style=" color: #000;">.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">BDD helps preserve the quality and maintainability of the software, so a further indicator is that the implementation costs of new features is kept low. This is in contrast to many other projects where, as the codebase grows, the cost of adding (or modifying) a feature increases exponentially. If allowed to deteriorate in this way, your project will finally reach the point where it is not possible to add new features anymore in a cost-efficient way and people will start talking about a “rewrite”.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Our goal with this book is to ease your way through the learning period, avoiding the mistakes that we made while we were learning.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">One typical mistake is to see BDD as a tool-thing. BDD is primarily about collabo- ration and domain discovery; any “BDD tool” can be only useful in supporting this process. You have to start by investing in collaborative discussions and the creation of a shared vocabulary. Just going after automation (using Cucumber or SpecFlow) does not work.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;line-height: 148%;text-align: justify;">It doesn’t. Honest.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">As we said, we don’t believe in buzzwords, but if you intend to evaluate the BDD approach objectively, it is important to do it at full throttle during the evaluation period. You might feel uncomfortable or skeptical when you start doing BDD (like with any other new approach). That is absolutely fine, but don’t let the evaluation be hampered by your fears. Once you have decided to evaluate how BDD could work for your team, give yourself enough time to get comfortable with the approach. Try, as far as possible, to follow our recommendations.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">You’re at the beginning of a brave new world. Let us help you to explore that world and discover the benefits that are waiting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_005.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 6pt;text-indent: 18pt;text-align: left;"><a name="bookmark11"><span class="s20">¹</span></a>Adzic, Gojko. <i>Specification by Example: How Successful Teams Deliver the Right Software</i>. Shelter Island, NY: Manning, 2011. Print.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark4">Who this book is for</a><a name="bookmark12">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">This book is written for everyone involved in the specification and delivery of software (including product owners, business analysts, developers and testers). The book starts by explaining the reasons that BDD exists in the first place and describes techniques for getting the most out of collaboration between the <i><b>delivery team </b></i>(those that implement the solution) and the <i><b>business team </b></i>(those that work on the requirements).</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Just to re-iterate, this book is aimed at everyone involved in the project, irrespective of their role, whether they come from a software background or not.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">It’s also worth stressing that this book is tool agnostic. Whether you use Cucumber, SpecFlow, JBehave, Fit, FITNESSE, RSpec, Jasmine, Behave, or any other BDD tool</p><ul id="l11"><li><p style="padding-left: 15pt;text-indent: -9pt;line-height: 14pt;text-align: justify;">this book will help your team collaborate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark5">Why you should listen to us</a><a name="bookmark13">&zwnj;</a></h2><p class="s18" style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Gáspár <span class="p">is the creator and main contributor of SpecFlow, the most widely used ATDD/BDD framework for .NET.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">He is an independent coach, trainer and test automation expert focusing on helping teams implementing BDD and SpecFlow through his company, called Spec Solutions. He has more than 15 years of experience in enterprise software development as he worked as an architect and agile developer coach.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">He shares useful BDD and test automation related tips on his blog (http://gasparnagy.com) and on Twitter (@gasparnagy). He edits a monthly newsletter (http://bddaddict.com) about interesting articles, videos and news related to BDD, SpecFlow and Cucumber.</p><p class="s18" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Seb <span class="p">has been a consultant, coach, designer, analyst and developer for over 30 years. He has been involved in the full development lifecycle with experience that ranges from Architecture to Support, from BASIC to Ruby.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">During his career, he has worked for companies large (e.g. IBM, Amazon) and small, and has extensive experience of failed projects. He’s now a partner in Cucumber Limited, who help teams adopt and refine their agile practices, with a particular focus on collaboration and automated testing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">He’s a regular speaker at conferences, a contributing author to “97 Things Every Programmer Should Know” (O’Reilly) and the lead author of “The Cucumber for Java Book” (Pragmatic Programmers).</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">He blogs at cucumber.io and tweets as @sebrose.</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Together Seb and Gáspár have over 50 years of software experience.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark6">Acknowledgements</a><a name="bookmark14">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">This book would not have been possible without the help of our reviewers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l12"><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">Gojko Adzic</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Garret Burns</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Darren Cauthon</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Lisa Crispin</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Claude Hanhart</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Dave Hanlon</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Sam Holder</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Alexandra Fung</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Adrienn Kolláth</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Gilbert Liddell</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Viktor Nemes</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Paul Rayner</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Chuck Suscheck</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Steve Tooke</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Andreas Willich</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark7">How this book series is organised</a><a name="bookmark15">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">This is the first of the BDD Books series, that will guide you through the end-to-end adoption of BDD, including specific practices needed to successfully drive develop- ment using collaboratively authored specifications and living documentation.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Once you’ve implemented the approach we described you can read:</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 35pt;text-indent: -10pt;text-align: left;"><a href="#bookmark18" class="s19">Formulation (Book 2): express examples using Given/When/Then</a><a href="#bookmark18" class="s15">²</a></p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;"><a href="#bookmark19" class="s19">Automation with SpecFlow (Book 3)</a><a href="#bookmark19" class="s15">³</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark8">What is not in this book</a><a name="bookmark16">&zwnj;</a></h2></li><li><p style="padding-top: 17pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Formulation</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Structuring documentation</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Gherkin</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Tools</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Automation</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">Code</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark9">Online resources</a><a name="bookmark17">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="http://bddbooks.com/" class="s19">http://bddbooks.com</a></p><p class="s18" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Gáspár Nagy and Seb Rose<span class="p">, August 2017</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_006.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark18"><span class="s20">²</span></a>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Formulation</i><a href="http://bddbooks.com/formulation" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/formulation</span>.<a name="bookmark19">&zwnj;</a></p><p class="s23" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s20">³</span>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Automation with SpecFlow</i><a href="http://bddbooks.com/specflow" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/specflow</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 13pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark20">Chapter 1 – What is BDD?</a><a name="bookmark28">&zwnj;</a></h1><p style="text-indent: 0pt;text-align: left;"><span><img width="527" height="215" alt="image" src="Image_007.png"/></span></p><h2 style="padding-top: 16pt;padding-left: 27pt;text-indent: 0pt;line-height: 79%;text-align: justify;">Seb’s story: BDD, ATDD or Specification By Example?</h2><p class="s3" style="padding-top: 5pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://lizkeogh.com/2011/06/27/atdd-vs-bdd-and-a-potted-history-of-some-related-stuff/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt;" target="_blank">I used to get confused by all the different names that I read in blog posts. There was Behaviour Driven Development (BDD), Acceptance Test-Driven Development (ATDD) and Specification By Example. I tried to work out how they differed, but eventually I realised (</a><a href="http://lizkeogh.com/2011/06/27/atdd-vs-bdd-and-a-potted-history-of-some-related-stuff/" class="s25" target="_blank">helped by Liz Keog</a><a href="#bookmark30" class="s25">h</a><span style=" color: #009; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt;"></span>) that they were just different names for the same thing.</p><p style="padding-top: 4pt;padding-left: 45pt;text-indent: 0pt;text-align: center;"><a href="http://lizkeogh.com/2011/06/27/atdd-vs-bdd-and-a-potted-history-of-some-related-stuff/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank"></a><a href="http://lizkeogh.com/2011/06/27/atdd-vs-bdd-and-a-potted-history-of-some-related-stuff/" class="a" target="_blank">http://lizkeogh.com/2011/06/27/atdd-vs-bdd-and-a-potted-history-of-some-related-</a><a href="http://lizkeogh.com/2011/06/27/atdd-vs-bdd-and-a-potted-history-of-some-related-stuff/" target="_blank">stuff/</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 15pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Behaviour Driven Development (BDD) is an agile approach to delivering software that has been gaining momentum over the past ten years, or so. In this chapter, we take a look at why BDD came into existence, what challenges it addresses and take a high level look at how it works.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l13"><ol id="l14"><li><h2 style="padding-top: 10pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark21">– The missing link</a><a name="bookmark29">&zwnj;</a><a name="bookmark30">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The purpose of software development is to deliver solutions to business problems. A continuing challenge is to verify that the software actually satisfies the requirements. Waterfall methods had slow feedback cycles built into them, allowing projects to go seriously off track. In response, the industry began to experiment with lightweight methodologies like XP and Scrum.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Agile iterations are often mis-implemented as mini-waterfalls. Teams spend weeks implementing a user story. <i>After </i>that comes testing, to make sure they got it right. When they discover a mistake, they have to fix the problem and retest the story –</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">a tedious and time-consuming process. The resulting delay in feedback continues to limit the benefits that agile development methods can deliver.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="529" height="159" alt="image" src="Image_008.png"/></span></p><p class="s28" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 1 – Agile mini-waterfall</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><i><b>Test-Driven Development (TDD) </b></i>helps speed up the feedback loop by demanding that teams write automated tests <i>before </i>they write the code. That in itself is not enough.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Gaspar’s story: Automation is not enough</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In a company I was working for, testing new features was always chaotic. We never did any testing until after the feature was <i>done  </i>and it was only then   that we discovered we had misunderstood things had previously seemed <i>obvious</i>. Unfortunately, since this testing was all manual, things did not get any better after this. We continued to need real people, running through test scripts, to make sure that the application still behaved as expected. Tedious, manual regression testing.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">We needed automation - this is how we wanted to improve the regression testing problem. However, automating our scripts required us to write code, and the code became hard to follow, even for other developers. This created a barrier to having discussions about misunderstandings and different interpretations of <i>obvious</i>. We needed a solution that made tests automatable, but preserved their connection to requirements.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">In the early days, <b>JUnit </b>required developers to use the word “test” in their method names and this overemphasised one goal of unit tests (“testing”) at the expense of</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">other goals, such as design, documentation, and definition of the expected behaviour. By giving them a name like <span class="s30">OrderTest</span>, they become detached from the business requirement as soon as the test has been completed. And as time goes by, this gap gets bigger and bigger.</p><p class="s16" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark31" class="s19">Dan North noticed this problem and suggested some practical rules for naming and structuring the test methods to preserve their connection with the requirements.</a>⁴ <span style=" color: #000;">He also explained that the easiest way to verify whether our tests expressed the expected behaviour was to show them to the business representatives. However, business people rarely read source code, so he developed a small tool that performed a few simple transformations to make the test results business-readable.</span></p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="https://dannorth.net/introducing-bdd/" class="s19" target="_blank">He called this concept </a><a href="https://dannorth.net/introducing-bdd/" class="s31" target="_blank">Behaviour Driven Development </a><a href="#bookmark32" class="s15">(BDD)</a>⁵<a href="#bookmark33" class="s19">, intentionally re- moving the word “test” to encourage business people to remain engaged throughout the process. BDD helps maintain a connection between the requirements and the software – and as such acts as a bridge. Gojko Adzic even called his first book “Bridging the communication gap” </a>⁶<span style=" color: #000;">.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The bridge is made out of <i>examples</i>. Every test is an example. Each example is an expression of a required system behaviour. If you have sufficient examples you define the behaviour of the system - you have documented the requirements. Business people remain engaged, because the examples are expressed in business language. Fast feedback is preserved, because the examples are automated.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">These examples are often written using the <i><b>Given</b></i>, <i><b>When </b></i>and <i><b>Then </b></i><a href="https://theitriskmanager.wordpress.com/about/" class="s19" target="_blank">keywords (introduced by </a><a href="#bookmark34" class="s15">Chris Matts</a><span style=" color: #009;">⁷</span>) and called <i><b>scenarios</b></i>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_009.png"/></span></p><p class="s20" style="padding-top: 1pt;padding-left: 6pt;text-indent: 18pt;text-align: justify;"><a name="bookmark31">⁴</a><a href="http://www.industriallogic.com/blog/storytest-driven-development-article/" class="s32" target="_blank">Similar problems had been observed by other people, such as Kent Beck with Customer Tests (“Extreme Programming Explained: Embrace Change”), Joshua Kerievsky https://www.industriallogic.com/blog/storytest-driven-dev</a><a href="http://fit.c2.com/)" class="s32" target="_blank">elopment-article/, Ward Cunningham (</a><span class="s23">http://fit.c2.com/) and Eric Evans (“Domain-driven Design: Tackling Complexity in the Heart of Software”)</span><a name="bookmark32">&zwnj;</a></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="https://dannorth.net/introducing-bdd/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark33">⁵</a><a href="https://dannorth.net/introducing-bdd/" target="_blank">https://dannorth.net/introducing-bdd/</a></p><p class="s23" style="padding-left: 6pt;text-indent: 18pt;text-align: left;"><a name="bookmark34"><span class="s20">⁶</span></a>Adzic, Gojko. <i>Bridging the Communication Gap: Specification by Example and Agile Acceptance Testing</i>. London: Neuri, 2009. Print.</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="https://theitriskmanager.wordpress.com/about/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">⁷</a><a href="https://theitriskmanager.wordpress.com/about/" target="_blank">https://theitriskmanager.wordpress.com/about/</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Scenario: <span class="s34">Allow address change while the order is in preparation</span></p><p class="s33" style="padding-top: 2pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">Given <span class="s34">the  client&#39;s  order  is  currently  &#39;in  preparation&#39;</span></p><p class="s33" style="padding-top: 2pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">When <span class="s34">the  client  changes  the  delivery  address</span></p><p class="s33" style="padding-top: 2pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">Then <span class="s34">the  change  should  be  accepted</span></p><p class="s33" style="padding-top: 2pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">And <span class="s34">the  new  address  should  be  set  as  the  delivery  address</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><span style=" color: #000;">The scenarios represent the requirement details and they are formal enough to be executed by a computer, to give feedback about the implementation. Teams sometimes write their own tools to support this, but there are several freely available </span><span class="s22">BDD tools </span><a href="http://www.specflow.org/" class="s19" target="_blank">that make this simple, such as </a><a href="#bookmark35" class="s35">SpecFlow</a>⁸ <a href="http://cucumber.io/" class="s19" target="_blank">and </a><a href="#bookmark36" class="s35">Cucumber</a>⁹<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="530" height="242" alt="image" src="Image_010.png"/></span></p><p class="s28" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 2 – Scenarios link requirements to software</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark37" class="s19">The bridge built with the examples has been ignored by software developers for decades.</a>¹⁰ <a href="https://www.youtube.com/watch?v=ReEkLYoXjK8" class="s19" target="_blank">Agile itself didn’t address this directly, but BDD does. As Matt Wynne </a><a href="#bookmark38" class="s15">said</a>¹¹<span style=" color: #000;">, “BDD can save your agile.” In short, BDD is the missing link.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_011.png"/></span></p><p style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="http://www.specflow.org/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark35">⁸</a><a href="http://www.specflow.org/" target="_blank">http://www.specflow.org</a><a name="bookmark36">&zwnj;</a></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="http://cucumber.io/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark37">⁹</a><a href="http://cucumber.io/" target="_blank">http://cucumber.io</a></p><p class="s20" style="padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;">¹⁰<a href="http://www.exampler.com/old-blog/2003/08/22/#agile-testing-project-" class="s32" target="_blank">Brian Marick was an early exponent of examples http://www.exampler.com/old-blog/2003/08/22/#agile-testing-project-</a></p><p class="s23" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">2</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://www.youtube.com/watch?v=ReEkLYoXjK8" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark38">¹¹</a><a href="https://www.youtube.com/watch?v=ReEkLYoXjK8" target="_blank">https://www.youtube.com/watch?v=ReEkLYoXjK8</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-top: 5pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark22">– How does BDD work?</a><a name="bookmark39">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Examples (and their formalized representation - scenarios) play a critically important role in BDD. To understand how BDD works, let’s have a look at the way that these scenarios are created and how they drive the development process.</p><p class="s37" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark124" class="s19">Behaviour Driven Development is typically used in agile projects, the requirements are discovered using user stories that the team discusses throughout the project. Defining and prioritizing good user stories is an exciting challenge in itself. There are many good methods you can use, like impact mapping or story mapping, but these are not directly related to BDD and are therefore out of the scope of this book. BDD kicks in when the details of the user stories are discussed by the team for the first time (see </a><a href="#bookmark124" class="s15">Chapter 4, </a>Who does what and when<span class="p">).</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In a project following the BDD approach, we collect and discuss examples while working with a user story. We use the examples to explore and illustrate the expected behaviour of the business domain.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">User stories are typically broken down into acceptance criteria or business rules, but these are often subject to misunderstandings. Focusing on examples makes the intention of these rules clear - each rule should be <i>illustrated </i>by one or more examples. However, examples also enable us to <i>explore </i>our understanding of a rule. Exploration often leads to the discovery of complexities and assumptions that otherwise would not be found until much later in the development process.</p><p class="s37" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark76" class="s19">In </a><a href="#bookmark76" class="s15">Chapter 2, </a>Structured conversation<span class="p">, we show in more detail what these examples look like and how you can facilitate requirement workshops to discover them. For now, let’s say that examples are concrete usage descriptions of how the application or one of its features should behave. The better the examples you collect during the requirement workshop, the easier it will be to deliver the project successfully using BDD.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Examples can take various forms. They can appear as input-output data pairs, sketches of the user interface, bulleted lists of different steps of a user workflow or even an Excel workbook illustrating a calculation or a report. The only thing that is common to all examples is that they describe a behaviour as a combination of <i><b>context</b></i>, <i><b>action</b></i>, and <i><b>outcome </b></i><a href="#bookmark100" class="s19">- which we’ll describe in detail in </a><a href="#bookmark100" class="s15">Chapter 3, </a><a href="#bookmark100" class="s36">What </a><span class="s37">is an example?</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Once the user story is prepared and discussed with the team, the development phase starts. Using BDD, teams implement the expected behaviour that was illustrated by the examples. In order to use the examples to drive the development, we <i><b>formulate </b></i>some of them into scenarios. The scenarios can be considered part of the code base of the application, because they are used to verify a specific version of the application. BDD tools turn these scenarios into executable tests <i>before </i>the related behaviour has been implemented in the application itself.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Seb’s story: Formulation</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When I first started working with Gáspár, I wondered why he kept using the word “formulate”. It’s not a term used by software professionals in general, or BDD practitioners in particular. He explained that it was the best word that he had found to describe the process of turning concrete examples into business-readable documentation. I was pretty sure there must be a better word, so I went away to try to think of one.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I tried substituting with “translate”, but there’s a lot of creative energy required to write a good BDD scenario. “Translate” didn’t do it justice, and nor did “convert”.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Merriam_webster dictionary defines formulate as: <i>to put into a systematized statement or expression</i>. This is an accurate description of what we do when we convert examples into scenarios. This is an important task that is uniquely focused on by BDD practitioners and it deserves a precise name. <i>Formulation </i>is ideal!</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark40" class="s19">With test-driven development (TDD), we drive the application development by writing a test first - one that initially fails. Then we implement the application so that the test passes. After a code cleanup (refactoring), we can move on to the next test. This cyclic development flow is illustrated in </a>Figure 3<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 113pt;text-indent: 0pt;text-align: left;"><span><img width="254" height="215" alt="image" src="Image_012.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 3 – The TDD cycle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark40">BDD drives the development in a very similar way, although the scenarios are often expressed at a higher level. We start by writing a new scenario that should initially fail, then we iteratively implement the automation and application code until the scenario finally passes. After cleaning up the codebase (refactoring), we can move on to the next scenario.</a></p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark41" class="s19">BDD does not replace TDD (although Matt Wynne and Aslak Hellesøy defined BDD as “TDD done right” in the “Cucumber Book” </a>¹²<a href="#bookmark43" class="s19">). Teams who use BDD often use TDD for ensuring the quality of the inner structure in the application. </a>Figure 4 <a href="#bookmark42" class="s19">shows the BDD cycle and how it fits to the TDD loop (Freeman &amp; Pryce: “Growing object- oriented software guided by tests” </a>¹³<span style=" color: #000;">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_013.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark41"><span class="s20">¹²</span></a>Wynne, Matt, and Aslak Hellesøy. <i>The Cucumber Book: Behaviour-driven Development for Testers and Developers</i>.</p><p class="s23" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: justify;"><a name="bookmark42">Dallas, TX: Pragmatic helf, 2012. Print.</a></p><p class="s23" style="padding-left: 6pt;text-indent: 15pt;text-align: left;"><span class="s20">¹³</span>Freeman, Steve, and Nat Pryce. <i>Growing Object-oriented Software Guided by Tests</i>. S.l.: Addison-Wesley Professional, 2009. Print.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="483" height="274" alt="image" src="Image_014.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 4 – The BDD cycle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark43">An executable BDD scenario provides useful feedback for the entire team, including the business representatives.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></ol></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">It gives feedback about the implementation correctness for the developers</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">It gives feedback about the solution for the product owner</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">It describes the implemented behaviour helping business analysts understand existing functionality</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">It gives a signal for the manual, exploratory testers that a feature is ready for testing</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">It provides a safety net for the developers, identifying any unwanted side- effects of changes</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">It provides detailed documentation of the application for the support team</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">It defines a domain language that is understood by everyone</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l15"><ol id="l16"><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark23">– What about testing?</a><a name="bookmark44">&zwnj;</a><a name="bookmark45">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">We mentioned earlier that the word “test” had been intentionally left out from the name of Behaviour Driven Development. The aim was to achieve a better</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">engagement of business representatives. When first hearing about BDD, many testers have concerns about how it will affect their role, responsibilities, and position.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">BDD does not replace classic testing and testing skills. In fact, BDD itself does not define how testing should be performed. Instead, it provides a set of practical guidelines that facilitate the <i>agile testing process</i><a href="#bookmark47" class="s19">. Agile testing is described in detail in the book by Janet Gregory and Lisa Crispin, called “Agile Testing” </a><span style=" color: #009;">¹⁴</span>. The basic concept of agile testing is to move the responsibilities of testing from finding and reporting application issues to ensuring that these issues are never added to the codebase in the first place.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">It’s a little bit like the relationship between catching criminals and crime prevention. Crime prevention is a much nicer and cheaper way of ensuring security, but it does not replace the presence of police on the streets. The same happens with testing in a BDD project. Testers are involved in all project requirement discussions, to help <i>prevent </i>bugs. Later on, they will still work on verifying the correctness of the created product – <i>catching </i>bugs.</p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark48" class="s19">A significant proportion of defects</a>¹⁵ <span style=" color: #000;">are rooted in problems that arise from mis- understood requirements. Misunderstandings can arise for many reasons: language barrier issues, unspecified combinations, ambiguous domain terms or different interpretations of common sense. Testers can help by pointing out inconsistencies, identifying examples or considering edge cases while a user story is being discussed. Testers can also give support in evaluating approaches to testing new features.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Not all defects are eliminated during these discussions. Verification remains critical, though it does become slightly different. Due to the high level of automation, less time is spent on manual regression testing and more on exploratory verification. The latter needs a much broader sense of correctness, which can be ensured only by a human. This kind of verification is usually done through <i><b>exploratory testing </b></i><a href="#bookmark49" class="s19">(Elisabeth Hendrickson: “Explore It!” </a><span style=" color: #009;">¹⁶</span>).</p><p style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark46">The change of focus described above leads to better integration of testers into the team.</a></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_015.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 6pt;text-indent: 15pt;text-align: left;"><a name="bookmark47"><span class="s20">¹⁴</span></a>Crispin, Lisa, and Janet Gregory. <i>Agile Testing: A Practical Guide for Testers and Agile Teams</i>. Upper Saddle River, NJ: Addison-Wesley, 2009. Print.<a name="bookmark48">&zwnj;</a></p><p class="s20" style="padding-left: 6pt;text-indent: 15pt;text-align: left;"><a name="bookmark49">¹⁵</a><span class="s23">J.-C. Chen and S.-J. Huang, “An empirical analysis of the impact of software development problem factors on software maintainability,” Journal of Systems and Software, vol. 82, pp. 981-992 June 2009.</span></p><p class="s23" style="padding-left: 6pt;text-indent: 15pt;text-align: left;"><span class="s20">¹⁶</span>Hendrickson, Elisabeth, Ward Cunningham, and Jacquelyn Carter. <i>Explore It! Reduce Risk and Increase Confidence with Exploratory Testing</i>. Dallas: Pragmatic helf, 2013. Print.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark24">– A language that is understood by everyone</a><a name="bookmark50">&zwnj;</a></h2><p style="text-indent: 0pt;text-align: left;"><span><img width="527" height="441" alt="image" src="Image_016.png"/></span></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Gaspar’s story: Find the right words</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I was renovating the roof of our terraced house and had to go to the plumbing shop to buy a few missing items. I knew what I needed, because I had already seen hundreds of gutters. Nevertheless, the first five minutes were spent explaining what I wanted and discovering what the name of that “thing” was. We even needed to draw some sketches. Once we agreed on what the “thing” I wanted was called, they could serve me quickly. It was even in stock!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 45pt;text-indent: 0pt;text-align: center;">Gutter “things”</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Robert C. Martin, alias Uncle Bob, has said that a software project cannot be successful without the dev team becoming domain experts at some level. You can write good software only for problems that you understand. Anything else works only for the short term. When you decided to work as an IT professional, you probably did not expect to need deep knowledge of heavy-duty construction equipment or sports event broadcasting. Whenever you join a project, you will certainly become familiar with its business domain. At the end of the day, this makes our job more interesting. We should see every project as a voyage of discovery.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="http://martinfowler.com/bliki/UbiquitousLanguage.html" class="s19" target="_blank">Software projects have the same challenges. A rough understanding of the project’s business domain is usually not enough to provide a precise solution. We have to define a language in which the customer can explain their problems in detail and in which we also can explain the solution we are going to provide. A language that is understood by everyone. Eric Evans uses the term </a><a href="#bookmark53" class="s31">ubiquitous language</a>¹⁷ <a href="#bookmark54" class="s19">for this in domain-driven design</a>¹⁸ <span style=" color: #000;">(DDD).</span></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark51">The team writes scenarios using this language. If we use these scenarios to drive our implementation, the model we create for the solution will remain close to the business domain. This, in turn, helps keep our software easy to understand and maintain. In </a><a href="#bookmark55" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Formulation</a><span style=" color: #009;">¹⁹ </span>we talk more about the ubiquitous language and how to write scenarios that focus on the business domain.</p></li><li><h2 style="padding-top: 10pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark25">– Living documentation</a><a name="bookmark52">&zwnj;</a></h2><p style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If you have heard about BDD, you have probably stumbled across the term <i><b>living documentation</b></i>. This is a kind of documentation that never gets outdated, or at least you will be immediately informed when it does.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">It is easy to see that the scenarios make up a kind of living structure, because we can always verify whether a scenario is supported by the application or not. If it is supported, the scenario passes. If not, the scenario fails. Thanks to the ubiquitous language, even the business representatives will immediately know which expectations may not be fulfilled by our solution.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">It is harder to see how these scenarios can be used as a documentation. The target users of this kind of living documentation are the business representatives of the project and the development team (including testing, operations and support). Scenarios are written in a language that uses domain-specific terms to describe the behaviour of the application. As such, they are readable by, and interesting to, domain experts, but not necessarily for end users. Therefore, the scenarios are not a replacement for end user documentation or online help.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Scenarios are most useful when someone needs to check how the system works in some specific situations: “Is ‘OR’ search supported?”, “Can our system handle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_017.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="http://martinfowler.com/bliki/UbiquitousLanguage.html" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark53">¹⁷</a><a href="http://martinfowler.com/bliki/UbiquitousLanguage.html" target="_blank">http://martinfowler.com/bliki/UbiquitousLanguage.html</a><a name="bookmark54">&zwnj;</a></p><p class="s23" style="padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark55"><span class="s20">¹⁸</span></a>Evans, Eric. <i>Domain-driven Design: Tackling Complexity in the Heart of Software</i>. Boston: Addison-Wesley, 2004. Print.</p><p class="s23" style="padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s20">¹⁹</span>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Formulation</i><a href="http://bddbooks.com/formulation" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/formulation</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">zero interest rate?”, “What happens if multiple users attempt to change the same order?” We could answer these questions by trying them out on a test installation, but that might require complex setup steps that take a lot of time and effort. If you are planning a new feature and would like to know its impact on the system, or if you are on a support call, you can search for a few keywords in the living documentation. The scenarios found will describe the current behaviour of the system, providing you with the information you were looking for.</p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="https://github.com/cucumber/gherkin" class="s19" target="_blank" name="bookmark56">The success of using scenarios as living documentation mainly depends on whether you can make it accessible for the target audience in a convenient way. It is hard to imagine that a business analyst will open Visual Studio, do a git pull, find the scenarios that he or she is interested in and read them as plain text file. Fortunately there are several tools that can help with this, thanks to the </a><a href="https://github.com/cucumber/gherkin" class="s15" target="_blank">Gherkin </a><a href="#bookmark58" class="s15">open specification format</a>²⁰ <a href="https://cucumber.io/pro" class="s19" target="_blank">used by the scenarios shown in this book. Make sure you check out </a><a href="#bookmark59" class="s35">Cucumber Pro</a>²¹<a href="http://www.picklesdoc.com/" class="s19" target="_blank">, </a><a href="#bookmark60" class="s35">Pickles</a>²²<a href="https://www.relishapp.com/" class="s19" target="_blank">, </a><a href="#bookmark61" class="s35">Relish</a>²³<a href="http://www.specflow.org/plus/runner/" class="s19" target="_blank">, </a><a href="#bookmark62" class="s35">SpecFlow+ Runner</a>²⁴ <a href="http://www.speclog.net/" class="s19" target="_blank">and </a><a href="#bookmark63" class="s35">SpecLog</a>²⁵ <span style=" color: #000;">(to name a few).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark26">– What is BDD, then?</a><a name="bookmark57">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">BDD is an agile approach that consists of three practices that have to be addressed in order. The first practice is <i>discovery</i>, a structured, collaborative activity that uses concrete examples to uncover the ambiguities and misunderstandings that traditionally derail software projects.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The second practice is <i>formulation</i>, a creative process that turns the concrete ex- amples produced during discovery into business-readable scenarios. The subsequent review of the scenarios delivers the confidence that the team really has understood what the business is asking for.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The third, and final, practice is <i>automation </i>where code is written that turns the scenarios into tests. The benefits of automation are many and various:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_018.png"/></span></p><p class="s38" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://github.com/cucumber/gherkin" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark58">²⁰</a>https://github.com/cucumber/gherkin <a href="https://cucumber.io/pro" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">²¹</a>https://cucumber.io/pro <a href="http://www.picklesdoc.com/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">²²</a>http://www.picklesdoc.com/ <a href="https://www.relishapp.com/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">²³</a>https://www.relishapp.com/ <a href="http://www.specflow.org/plus/runner/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">²⁴</a>http://www.specflow.org/plus/runner/ <a href="http://www.speclog.net/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">²⁵</a><a href="http://www.speclog.net/" target="_blank">http://www.speclog.net/</a><a name="bookmark59">&zwnj;</a><a name="bookmark60">&zwnj;</a><a name="bookmark61">&zwnj;</a><a name="bookmark62">&zwnj;</a><a name="bookmark63">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l17"><li><p style="padding-top: 4pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">when the tests pass, the development team can be confident they have delivered what the business have asked for</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">the tests give the development team a safety net when the time comes to modify the code</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">the tests form <i>living documentation </i>of how the system behaves, readable by the business, guaranteed to be up-to-date</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="439" height="327" alt="image" src="Image_019.png"/></span></p><p class="s28" style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 5 – BDD practices</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Many development teams come to BDD through the desire to improve their test automation. Improved test automation <b>is </b>one of the significant outcomes of following a BDD approach, but it is a <i>downstream </i>outcome. Unless you adopt the practices in the order described (<i>discovery</i>, <i>formulation</i>, <i>automation</i>) you will not gain the expected benefits.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Conversely, you will achieve significant improvements in your software develop- ment activities just by practicing <i>discovery </i>on its own. Add <i>formulation </i>and you’ll get the extra benefits that come from growing a truly ubiquitous language through an active review and feedback process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="http://lizkeogh.com/2014/01/22/using-bdd-with-legacy-systems/" class="s19" target="_blank">And finally, creating an extra, business-language layer of automated tests is expen- sive – you’ll only get a good return on your investment if you successfully engage the business team members. So, </a><a href="#bookmark65" class="s15">don’t focus on the automation tools</a>²⁶ <span style=" color: #000;">until you’ve got good at collaborating across the team.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark27">– What we just learned</a><a name="bookmark64">&zwnj;</a></h2></li></ol></ol><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In this chapter you’ve been on a whirlwind tour of BDD. There’s a lot going on!</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We started by describing the challenges that BDD was created to address – the failures caused by misunderstandings within a project team. We showed how examples (and the scenarios that we formulate from them) make an excellent bridge between business requirements and technical specifications, effectively flushing out ambiguities.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">These scenarios, written in the project’s ubiquitous language, act both as documen- tation and as tests. As documentation, they close the feedback loop between the business and delivery members, demonstrating the successful communication of ideas. As tests, they show that the solution being developed is meeting the business requirements, as well as acting as a valuable safety net that will provide confidence whenever changes need to be made to the software. Finally, once the scenarios are automated there’s a further benefit – documentation that demonstrably describes the actual functionality provided by the software.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We also discussed the relationship between BDD and testing. They are related, but distinct. The focus of BDD is collaboration, leading to clear requirements understood by the whole team. The examples make great test cases and (once formulated) documentation – so there is definitely testing going on. However, the purpose is to assure all concerned that development is progressing in the correct direction, not to confirm exhaustively that the correct code has been written. This is still covered by the professional practices of developers and testers – developers writing automated programmer tests, testers verifying the solution using scripted and exploratory testing.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The rest of this book digs deeper into the collaborative, <i>discovery </i>practice – and how to fit it into your project’s process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_020.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="http://lizkeogh.com/2014/01/22/using-bdd-with-legacy-systems/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark65">²⁶</a><a href="http://lizkeogh.com/2014/01/22/using-bdd-with-legacy-systems/" target="_blank">http://lizkeogh.com/2014/01/22/using-bdd-with-legacy-systems/</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The next book, <a href="#bookmark66" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Formulation</a><span style=" color: #009;">²⁷</span>, will examine the techniques and pitfalls of <i>formulation</i>.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Finally, the <a href="#bookmark67" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Automation with SpecFlow</a><span style=" color: #009;">²⁸ </span>book will go into detail about the way an application can be <i>automated </i>with SpecFlow and gives in-depth examples of how to design maintainable automation code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_021.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark66"><span class="s20">²⁷</span></a>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Formulation</i><a href="http://bddbooks.com/formulation" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/formulation</span>.<a name="bookmark67">&zwnj;</a></p><p class="s23" style="padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s20">²⁸</span>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Automation with SpecFlow</i><a href="http://bddbooks.com/specflow" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/specflow</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;line-height: 90%;text-align: left;"><a name="bookmark68">Chapter 2 – Structured conversation</a><a name="bookmark76">&zwnj;</a></h1><p style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In this chapter, we are going to peer into the daily work of a software product team to learn more about how they use structured conversations to help them discover what the expected behaviour of the next feature should be. We’ll start by describing one of their requirement workshops. This will introduce concepts that you’re not familiar with, but don’t worry, all your questions will be answered later in the chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l18"><ol id="l19"><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark69">– Where is my pizza?</a><a name="bookmark77">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The team we will be visiting is developing a pizza delivery management application for a large pizza company. The application will allow clients to track the real-time location of their order(s), so they have come up with a fun name for the application: “Where is my pizza?” Some joker on the team noticed that this abbreviates to WIMP</p></li></ol></ol></li></ul></li><li><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">“a weak, cowardly, or ineffectual person” (Merriam-Webster). The rest of the team still know that the product will be awesome.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">There are lots of other exciting features too, but for the rest of this book we’ll be considering a client’s ability to modify the delivery address of an order after the order has been submitted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l20"><ol id="l21"><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark70">– A useful meeting</a><a name="bookmark78">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">It’s 9 a.m. on Wednesday morning and the team is assembling in the team room for another <i><b>requirement workshop</b></i>. There’s a good turnout today - Patricia (the PO), Dave and Dishita (from Development), Tracey (from Test) and Ian (the new intern).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Requirement workshop</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The team meets regularly (usually several times a week) to discuss the work that they’ll be undertaking in the next sprint or two. The purpose of this meeting    is to explore a story, understand it’s scope and illustrate it unambiguously with concrete examples. While they’re doing this, they may discover new details about the story. They may also ask questions that no one at the meeting is able to answer right away.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">What matters most in this meeting is to bring diverse perspectives together, so that they can learn about what needs to be done and work together more effectively. In other organizations, similar meetings have been variously called <i><b>three amigos meeting</b></i>, <i><b>discovery workshop</b></i>, <i><b>specification workshop</b></i>, <i><b>story refinement</b></i>, <i><b>product backlog refinement  </b></i>and <i><b>backlog grooming  </b></i>– as always, the name    is less important than the purpose.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="https://cucumber.io/blog/2015/12/08/example-mapping-introduction" class="s19" target="_blank">They’re very comfortable with this meeting format, because they meet several times a week for short, focused sessions that often work only on a single user story. The idea came from a blog post by Matt Wynne </a><a href="#bookmark79" class="s15">Introducing Example Mapping</a>²⁹ <span style=" color: #000;">that Dishita had recently read.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Patricia grabs the box of colored index cards and marker pens from the stationery cupboard and puts them in the middle of the table. Everyone knows which story Patricia has been preparing because she sent out an email yesterday. Patricia reads out the story that is going to be discussed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 141%;text-align: left;">In order to fix an incorrect delivery address, As a client,</p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;">I want to be able to change the delivery address after the order has been placed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Dishita summarizes this on a yellow index card:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="214" height="1" alt="image" src="Image_022.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://cucumber.io/blog/2015/12/08/example-mapping-introduction" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark79">²⁹</a><a href="https://cucumber.io/blog/2015/12/08/example-mapping-introduction" target="_blank">https://cucumber.io/blog/2015/12/08/example-mapping-introduction</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="422" height="265" alt="image" src="Image_023.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 6 – Story card on the table</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">“The system will need to be able to check whether it’s possible to change the delivery address”, says Patricia. “We’ll have to check that the new address is not too far from the current one. And we’ll need to check the state of the order too.” “This will be easy”, says Dave and they all smile. They have heard this sentence many times before. “We’ll see”, answers Tracey, “let’s try to come up with a few examples!” And the workshop begins.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="38" height="38" alt="image" src="Image_024.png"/></span></p><p class="s3" style="padding-left: 66pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Explaining a team discussion in a book is hard, because you need to keep track of the goals and perspectives of many people with different roles and backgrounds. To make it easier to follow, we have chosen the names of our team members so that their initials describe their role. <b>P</b>atricia is the <b>P</b>roduct Owner, <b>D</b>ave and <b>D</b>ishita are <b>D</b>evelopers, <b>T</b>racey is a <b>T</b>ester and <b>I</b>an is an <b>I</b>ntern from the University.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark56" class="s19">As we mentioned in </a><a href="#bookmark56" class="s15">Section 1.6, </a><span class="s37">What is BDD, then?</span>, one typical mistake is to look at BDD as a tool-thing. A similar mistake would be to think of BDD as a mechanical process, such as filling out a <i>Given</i>/<i>When</i>/<i>Then </i>template. We need all team members to actively challenge their understanding of the user story by coming up with concrete examples.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">There are many ways you can organize your team for better collaboration. Every team and every project is different. We are going to focus on a technique called <i><b>Example Mapping </b></i><a href="#bookmark124" class="s19">that is a simple and efficient way to facilitate your requirement workshops. This is one technique for carrying out a structured conversation, and it has worked very well for us, but you may need to find an alternative that is more suited to your context. Before you do, refer to </a><a href="#bookmark124" class="s15">Chapter 4, </a><a href="#bookmark124" class="s36">Who does what and </a><span class="s37">when</span>, where we will show how requirement workshops can fit into an agile project following Scrum, Lean/Kanban or even into a fixed scope project with distributed teams.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">So let’s get back to our team…</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark71">– Collecting examples</a><a name="bookmark80">&zwnj;</a></h2><p style="padding-top: 18pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Let’s start with the happy path, where the customer should be allowed to change the delivery address… and see if it’s as ‘easy’ as Dave thinks it will be. What would be a typical example for this?”, asks Tracey.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Yes, this is the case where the order is in preparation”, starts Patricia. Tracey, who volunteered to facilitate the meeting today, takes a green card and writes <i>Order is in preparation </i>on the top of it.</p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="https://en.wikipedia.org/wiki/Persona_(user_experience)" class="s19" target="_blank">“Which persona shall we use to describe this example?”, asks Patricia and they all look at the wall where posters of different user types, called </a><a href="#bookmark81" class="s31">personas</a>³⁰ <span style=" color: #000;">are displayed. The team introduced the personas a year ago when Ulla, the UX expert joined the company.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Let’s use Peter! He regularly orders pizzas at home and at the office. He probably gets the delivery address mixed up from time to time”, suggests Dishita.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“OK. So let’s say that Peter is in the office, but orders a Margherita pizza for home by mistake. The order has been placed and the restaurant starts to prepare it. He checks his emails a few minutes later and realizes he’s used the wrong address. He clicks on the tracking link from the email and chooses ‘Change Address’ on the tracking page. He selects the work address and submits the changes. The change is accepted”, explains Patricia.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_025.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://en.wikipedia.org/wiki/Persona_(user_experience)" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark81">³⁰</a><a href="https://en.wikipedia.org/wiki/Persona_(user_experience)" target="_blank">https://en.wikipedia.org/wiki/Persona_(user_experience)</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“What do you mean by ‘a few minutes later?’” asks Dishita.</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“The order has just been received, so the pizza isn’t ready yet” answers Patricia.</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Ah, OK. So the pizza might be in the oven, but it’s not ready for delivery?” checks Tracey.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Yes, that’s right” replies Patricia.</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">While she is explaining the details, they all look at the printed UI wireframes for the new “update address” page, to help follow the example easily. Tracey captures the important steps on a green card:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="273" height="172" alt="image" src="Image_026.jpg"/></span></p><p class="s28" style="padding-top: 11pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 7 – The first example card</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">They are all following Tracey as she captures these steps, so that they can verify if the details have been captured properly.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Is it ‘not ready’ or ‘in preparation’ that we have to watch for?”, asks Ian. “We use one in the example title and the other in the second step of the example”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Those two states mean essentially the same thing”, answers Dave. “If the pizza is in preparation, then it’s obviously not ready.”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“We just learnt about state diagrams in our UML module at university. Is that something we could use here?” asks Ian.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Dishita grabs a pen and stands at the whiteboard. “We don’t need a full UML state diagram, but I think an overview of the states would be useful, as well as some of the events.” It takes a few minutes to come up with a state diagram, similar to the one below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="509" height="64" alt="image" src="Image_027.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 8 – State diagram of pizza process</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Then why don’t we let them change the address up until the delivery person picks up the pizza?” asks Tracey. They all look at Patricia.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“That’s a good point, Tracey. Actually the important turning point is when the delivery person picks up the order. This is when they check the delivery address and plan the route”, concludes Patricia.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“OK. I’ll fix the example card”, says Tracey and changes the card to look like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="273" height="172" alt="image" src="Image_028.jpg"/></span></p><p class="s28" style="padding-top: 11pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 9 – The corrected example card (changes underlined)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Is everybody happy with this?” Everyone nods, so she places the card below the story card on the desk. “What rule is this example illustrating?”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“‘Allow address change if not picked up yet’”, replies Patricia and she picks a blue card, writes this rule on it and places it above the green card.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="295" height="372" alt="image" src="Image_029.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 10 – First rule in the example map</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">“What kind of other examples can we imagine for this rule? Is there a counter- example?”, Tracey helps to move the meeting forward.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Sure! If the order has been already picked up, we should respond with a big fat error message”, Dave replies promptly and smiles. “Easy…”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Everyone tries to imagine the situation… somehow it feels wrong. Dishita finally comes up with an example.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Let’s look at our other persona, Tim. He is a first time buyer, so he has to type in the delivery address. What if he makes a small mistake? I once mixed up the house number in one of my orders and only realized it when I got hungry and checked the notification mail.”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“But we can’t just let them change the address to a completely different location, once the pizza is already at the doorstep of the original delivery address…” says Patricia.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">They start a discussion about possible options, but the discussion gets stuck. “There are lots of ways we could handle a late change of delivery address, but none of them are simple. Do we really need to do this now?” asks Dave.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“It looks like we can’t solve this now. Let’s make a red card for it, and check the statistics to see how often this happens and how much extra cost is caused by this sort of mistake”, Tracey suggests.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">They all agree, so she takes a red card and summarizes the problem. They use the red cards to track questions or other discussion points that they cannot solve immediately. They place the red cards on the desk, so that everyone can see them. This way they can avoid endless discussions about the topic.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Can we come up with a temporary workaround for the problem?”, asks Tracey once she has finished writing down the question.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Maybe we could change the error message to advise the users to call the operator”, suggests Ian.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Very good! Let’s capture that quickly before we forget!” replies Patricia and they capture another example and place it under the previous one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="273" height="172" alt="image" src="Image_030.jpg"/></span></p><p class="s28" style="padding-top: 11pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 11 – The second example card</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;text-indent: 0pt;text-align: left;"><span><img width="491" height="497" alt="image" src="Image_031.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 12 – A counter example and a question</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">They all look at the examples to see how the system will behave in the different situations.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">“There’s another one!” cries out Tracey. “What if the pizza was picked up while Tim was typing in the new address in the address change screen?”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">The team realize that this illustrates the need for state verification both when the address change screen is opened and also when the change is submitted. This means</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">that even though it’s an edge case, it’s important enough to capture it as a third example of the rule.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 102pt;text-indent: 0pt;text-align: left;"><span><img width="274" height="173" alt="image" src="Image_032.jpg"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 13 – The third example card</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 148%;text-align: justify;">They cannot come up with any further relevant example, so they move on. “Is this what you call ‘easy’, Dave?”, asks Patricia.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">“Well… at least we’ve learned a lot about the address change process”, acknowledges Dave.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The team then discuss other business rules, like <i>only valid address is accepted</i>, <i>estimated time of arrival is updated </i>or <i>new address should be within restaurant’s delivery range</i>. They come up with examples for all these rules and lay them on the desk.</p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark82" class="s19">The workshop finishes in about half an hour, Tracey takes a photograph of the example map (</a>Figure 14<span style=" color: #000;">) and everyone goes back to their desk.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a name="bookmark82"><span><img width="494" height="641" alt="image" src="Image_033.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 14 – The final example map</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-top: 5pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark72">– Deliberate discovery</a><a name="bookmark83">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Developing software is a process of learning. I’ve never met a team that, after they deliver some working software, say “if we were to do that again, we’d do it exactly the same way.” That’s because, in the course of developing the software, they discover things that they didn’t know at the beginning.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Discovery that happens while you’re developing software can be thought of as “accidental discovery” - it may upset your schedule, or even derail or interrupt your roadmap entirely. The discovery that happens during a requirement work- shop is “<i><b>deliberate discovery</b></i>.” The meeting is convened with the almost-certain knowledge that there are things that we don’t know. We deliberately explore our understanding of the requirements using concrete examples and, more often than not, we are rewarded by learning things. The alternative is that the learning happens, accidentally, after the delivery team has already started developing the solution.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">While our team were discussing the “allow delivery address change” requirement above, examples turned out to be very useful. The rule started off looking really simple, but when they started coming up with examples to illustrate the rule, they found that they didn’t have a shared understanding of the possible states of an order. They cleared this up with a state diagram, which ultimately led to them modifying the rule to “Allow address change when order not picked up.”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The next example dug into what should happen when the order has been picked up, which has implications for the user experience. They came up with a simple solution and wrote out a question card to be answered by the business. This naturally led them to think about what should happen if the order is picked up <i>while </i>the address change is being requested, and they discovered another important behaviour.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark84">Examples are used both to illustrate what we already know and to force us to question our assumptions. They underpin the deliberate discovery conversation.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark73">– Example Mapping in a nutshell</a><a name="bookmark85">&zwnj;</a></h2><p style="padding-top: 18pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">“Example Mapping is a simple, low-tech method for making conversa- tions short and powerfully productive.” - Matt Wynne</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="https://cucumber.io/blog/2015/12/08/example-mapping-introduction" class="s19" target="_blank">The </a><a href="https://cucumber.io/blog/2015/12/08/example-mapping-introduction" class="s31" target="_blank">Example Mapping </a><a href="#bookmark86" class="s15">technique</a>³¹ <span style=" color: #000;">was discovered/invented by Matt Wynne who regularly facilitates requirement workshops for his customers. At one of his workshops, he had a pack of 4-colored index cards with him. He used the green cards to capture examples and grouped them by rules, which he wrote on blue cards. He discovered that arranging these cards as a map helps guide the discussion and gives a good visual overview of the requirements.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When participating in an Example Mapping workshop, we capture different artifacts on differently colored index cards or post-it notes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l22"><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;"><i><b>Examples </b></i>are captured on <b>green cards </b>– illustrate concrete behaviour of the system.</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;"><i><b>Rules </b></i>are written on <b>blue cards </b>– these are logical groupings of the examples usually focusing on a particular condition. Many teams call these <i><b>acceptance criteria </b></i>(AC), <i><b>business rules</b></i>, or simply <i><b>requirements</b></i>.</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;"><i><b>Questions </b></i>or <i><b>assumptions </b></i>are captured on <b>red cards </b>– any topic that would block the discussion. Since these are visible to everyone, we can avoid re- discussing these (usually frustrating) topics again and again.</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;"><i><b>User stories </b></i>are captured on <b>yellow cards </b>– we usually start discussing a single user story, but as we are digging into the details, we often decide to split the story into smaller stories and postpone some of them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_034.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="243" alt="image" src="Image_035.png"/></span></p><h2 style="padding-top: 16pt;padding-left: 27pt;text-indent: 0pt;line-height: 79%;text-align: justify;">Seb’s story: Business rules, requirements, acceptance criteria</h2><p class="s3" style="padding-top: 5pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When my teams start discussing a user story what they typically want to understand is the scope of the story and how difficult it might be to implement. Examples really help us understand how the story is supposed to behave, but we want them in related groups.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">These groupings have been called different things by different teams: business rules, acceptance criteria, requirements. Each of the terms comes with its own baggage and often hampers communication on the team. Instead, we’ve started just calling them <i>rules </i>- they’re abstract statements that describe a single aspect</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://cucumber.io/blog/2015/12/08/example-mapping-introduction" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark86">³¹</a><a href="https://cucumber.io/blog/2015/12/08/example-mapping-introduction" target="_blank">https://cucumber.io/blog/2015/12/08/example-mapping-introduction</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="96" alt="image" src="Image_036.png"/></span></p><p class="s3" style="padding-top: 7pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">of behaviour.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: left;">An added bonus is that when it comes to splitting a story, we can often split them simply by moving some rules (and their associated examples) to a new story.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark82" class="s19">We place the story card on the top row and arrange the rules in a row underneath. The examples belonging to a particular rule are placed below the rule card they relate to. We put the red cards to the side of the example map. At the end of the discussion the desk should look like </a>Figure 14<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Gaspar’s story: Rejoining a discussion</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">We all have been in meetings where a notification on our phone or some other interruption distracts our focus. Once you fall out of an animated discussion, it is very hard to get back into it. These kinds of problems can be minimized by establishing a better meeting culture, but they cannot be avoided completely. So, we’d better accept that this might happen and create an infrastructure that helps the people get back into the discussion as quickly as possible. Having a visual map (or a mindmap) that is visible to everyone makes it easier to see the big picture and check the details at the same time.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The example cards will be used later when we come to write our scenarios. It does not matter what format you use to write examples as long as you capture all the details that seemed important in the discussion. For example, even if you use Cucumber, you should not use <i>Given</i>/<i>When</i>/<i>Then </i>to write your examples.</p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><span class="p">When we have captured an example, we give it a title, so that we can refer to it easily. One simple way of coming up with a title is to copy the way that episodes of the </span>Friends <span class="p">sitcom were named: </span>“The One Where Rachel Finds Out”<span class="p">. The words you put after the </span>“The One Where …” <span class="p">happen to be very good titles for our examples. </span>“The One Where the <b>Order has been Picked Up Already</b>“<span class="p">.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">There’s no strict order you should collect the examples and the rules in. If the story is simple or well prepared, it will probably arrive with an initial set of rules</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">(or acceptance criteria). In this case it makes sense to go through these rules and understand their details by creating examples that illustrate each of them.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In other situations, where the story is more vague, it might make sense to come up with some examples that describe the typical behaviours that will be expected. Then, identify the rules that govern them.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">No matter how you do it, it is practical to nominate a <i><b>facilitator</b></i>, who keeps the meeting going. The facilitator takes care that the discussion is captured on the cards and that everyone agrees with the form they have been written down. The facilitator is not a special role, anyone from the team can do it. We recommend you rotate this role across all team members.</p><p class="s37" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark124" class="s19">With Example Mapping, you can discuss detailed requirements in a surprisingly short time. In many cases, the details of a user story can be discussed in 20-30 minutes. We’ve found this style of workshop can work for teams no matter what flavor of agile they’re using, as we discuss in </a><a href="#bookmark124" class="s15">Chapter 4, </a>Who does what and when<span class="p">. Because the workshops are short, we can run them several times a week.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark87">Once the map has been created, it is important not to lose this information. Some teams take photos and share it with team members. Others pin the cards on a pinboard in the team room or save it as a mind map.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark74">– How to establish structured conversations</a><a name="bookmark88">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Regardless of whether you use Example Mapping or another technique, structuring the conversations will help your requirement workshops be more focused and efficient. It’s time to define exactly what we mean by <i><b>structured conversation</b></i>. A structured conversation is a facilitated exchange of ideas that conforms to a predefined form. In the context of a requirement workshop, a structured conversation exhibit the following properties that we expand on below:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l23"><li><p class="s18" style="padding-left: 35pt;text-indent: -10pt;text-align: left;">collaborative<span class="p">: all attendees participate actively</span></p></li><li><p class="s18" style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">diverse perspectives<span class="p">: we need the three amigos</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p class="s18" style="padding-top: 4pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">short<span class="p">: we want regular workshops, so that the learning feedback loop stays fast</span></p></li><li><p class="s18" style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">progressive focus<span class="p">: we capture the progress of the workshop in real time, allowing the discussion to move forward quickly</span></p></li><li><p class="s18" style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">consensus<span class="p">: agreed concrete examples are the measure of the workshop’s success</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Collaborative</h3><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="377" alt="image" src="Image_037.png"/></span></p><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The conversations should include the entire team and encourage them to collaborate actively. In many agile projects the term <i>collaboration </i>means no more than inviting everyone to a planning meeting at which the product owner explains the require- ments and everyone else listens. We need more bi-directional communication.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 9pt;padding-left: 34pt;text-indent: 0pt;line-height: 79%;text-align: justify;">Gaspar’s story: Help them participate in the discussion!</h2><p class="s3" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Once a member of my team asked me an important question after the meeting finished. “This is a pretty important question! Why didn’t you ask the PO during the meeting?” I asked back trying to hide my emotions. “Because I wasn’t sure I understood everything and I thought my question might have been answered anyway” he responded. I was pretty much frustrated about this and other similar situations and I was dreaming of a team consisting of communicative, active super-heroes asking questions frequently.</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Soon afterwards, I was invited to a non-IT discussion once, where neither the topic nor the language were well known to me. I feared that I would not be able to participate properly in the discussion. The organizer helped me out by giving me a handout that contained the agenda, the discussion points and a few important sentences. Without these, I might have looked dumb, but instead I was able to participate in the discussion. Impressed by this experience I revised my attitude to team work.</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;text-align: justify;">Identifying the root causes of communication problems and figuring out how to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="70" alt="image" src="Image_038.png"/></span></p><p class="s3" style="padding-top: 7pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: left;">solve them is far better than dreaming of perfection and whining when you can’t achieve it. Working with an all-super-hero team must be really boring.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark124" class="s19">Everyone has a slightly different personality. You should establish a culture where everyone can participate, regardless of their personality. By using a method that requires people to stand up and move, talk to each other and arrange/annotate colored cards, we can exercise different senses, so everyone can contribute in the areas that they feel most comfortable with. For distributed teams, the possibilities are more limited, but with a few smart ideas the same efficiency can be achieved (see more on this in </a><a href="#bookmark124" class="s15">Chapter 4, </a>Who does what and when<span class="p">).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Diverse perspectives</h3><p class="s16" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="https://www.infoq.com/interviews/george-dinwiddie-three-amigos" class="s19" target="_blank">We uncover ambiguities by organizing requirement workshops where the represen- tatives of diverse perspectives (business, test, development) come together. These meetings are sometimes called </a><a href="#bookmark89" class="s31">Three Amigos</a>³² <span style=" color: #000;">meetings. Despite the name, the point is not that there should be only three people in the room. In your team there might be other roles as well (e.g. UX) or you might invite multiple representatives of the same role. What makes these meetings powerful is that the representatives of the different roles can challenge their understanding of the requirements at an early stage. Even though they are all talking about the same requirement, each person has their own perspective:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">the business representative focuses on the fulfillment of the business goals – for example when Patricia agrees that the address can be changed before the order is picked up</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">the developers explore the technical implications of the feature – for example when Dave concludes that all solutions for late change of delivery address will introduce costly complexities</p></li><li><p style="padding-bottom: 3pt;padding-left: 35pt;text-indent: -10pt;text-align: justify;">the testers can challenge the feasibility of testing the feature and help identify special corner cases – for example when Tracey noticed that the order might be picked up while the client was changing the delivery address</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_039.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://www.infoq.com/interviews/george-dinwiddie-three-amigos" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark89">³²</a><a href="https://www.infoq.com/interviews/george-dinwiddie-three-amigos" target="_blank">https://www.infoq.com/interviews/george-dinwiddie-three-amigos</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Short</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We suggest that requirement workshops should be no longer than 30 minutes. This is a because:</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">long meeting are exhausting - you’ll often not get active participation from all attendees throughout the meeting</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">long meetings are expensive – multiply the time by the number of people in the room and you frequently find meetings that cost a person-day</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">short meetings can be scheduled more frequently – shorter meetings are less disruptive and are easier to schedule</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">frequent meetings can vary the attendees – we can improve shared ownership by ensuring that it’s not always the same people at the meeting</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">frequent meetings reduce the impact of unanswerable questions – we can continue the discussion as soon as we discover the answer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Your situation may require longer, infrequent meetings, but even then we urge you to structure each meeting into several short, focused sessions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Progressive focus</h3><p style="padding-top: 12pt;padding-bottom: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We start the workshop knowing what we’re going to discuss, but we never know quite what we’ll discover. However, as the workshop unfolds we must capture what we learn, so that at the end we have a full record of our knowledge. Our understanding becomes progressively more complete, while the record allows us to maintain focus on what we still don’t understand.</p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Seb’s story: Progressive JPEG</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I think of a structured conversation as being a bit like a JPEG image downloading over a slow connection. The image becomes progressively more and more detailed. Early on you can often guess what it’s an image of, but it’s not until it finishes downloading that you can see the picture in its full glory.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">For our conversation to keep focused while our understanding develops progres- sively, we need to:</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">know what we’re meeting about – Patricia emailed out the story for discussion the day before</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: justify;">capture our understanding as it develops – the format is not important, but it must be low friction and captured continuously</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: justify;">be able to quickly grasp the state of the discussion – by capturing our understanding in a form that is readable by everyone, such as an example map</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: justify;">stop discussions that aren’t going anywhere – for example, by capturing unanswerable questions rather than discussing them fruitlessly</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Consensus</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">We know we have achieved consensus when we agree:</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">that the output is correct – the output may not be complete, but everything in it must be agreed by everybody</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: justify;">whether the feature is sufficiently understood – if it is then it needs no further discussion and development can proceed</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: justify;">there is no hidden/private knowledge – the content of all conversations is captured in the output and there is no need to consolidate private notes, email chains etc.</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: justify;">who is responsible for answering each remaining question – capturing ques- tions is a great way to keep the discussion moving, but someone needs to ensure that they get answered</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark75">– What we just learned</a><a name="bookmark90">&zwnj;</a></h2></li></ol></ol><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Software development is a learning process. The more we can learn about the problem, the easier solving it becomes. This process can be made more effective</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">by having several team members (with different perspectives) analyzing the re- quirements together <i>before they start developing the software</i>. These collaborative requirement workshops are most productive if they are kept short and run regularly throughout the project – often several times a week.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">There are many structured conversation techniques that have been used to facilitate these requirement workshops, but the most useful that we have come across is Example Mapping, as described by Matt Wynne. It’s simple, well documented and results in a visual recording of the conversation that clearly communicates the agreements that were reached, as well as the questions that remain unanswered. This in turn makes it easier for those that weren’t at the meeting to understand the issues and provide useful feedback.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">All software development projects depend on well understood requirements, but the approach described here works particularly well for the lightweight agile and lean methods that are in common use today.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark91">Chapter 3 – What is an example?</a><a name="bookmark100">&zwnj;</a></h1><p style="padding-top: 15pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In the previous chapters, we explored the role of examples in a BDD approach. You may have wondered: “Are examples really enough to specify a feature? How many examples do we need to specify a feature?”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In this chapter, we’re going to answer these questions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l24"><ol id="l25"><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark92">– How hard is concrete?</a><a name="bookmark101">&zwnj;</a></h2><p style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We all know what an example is, but when it comes to creating concrete examples that unambiguously illustrate how a system should behave, we need to ensure they’re good examples. It’s best to think of an example as being an artifact divided into 3 parts</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: justify;">- context, action and outcome - and to think of these in the <i>opposite </i>order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="439" height="137" alt="image" src="Image_040.png"/></span></p><p class="s28" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 15 – Anatomy of an example</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">The <i>outcome </i>is a description of the state of the system after the behaviour we’re interested in has taken place. It should contain enough detail so that we could actually go and check that the system has behaved according to our expectations.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The <i>action </i>is the event that causes the behaviour we’re interested in to take place. It might be some action by a user, but equally it might be an input from another system, a scheduled job, or any other stimulus that can cause the system to react.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The <i>context </i>describes the state the system is in <i>before </i>the action takes place. Sometimes, when the starting context is <i>obvious</i>, it can be tempting to omit describing</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">the context. Don’t do this! Once you are very familiar with creating concrete examples you might consider revisiting this advice, but not yet.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 18pt;padding-left: 27pt;text-indent: 0pt;line-height: 71%;text-align: justify;">Seb’s story: Illustrating things with con- crete</h2><p class="s3" style="padding-top: 5pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I often find myself explaining why we use the word ‘concrete’ when talking about examples. Rules are generic expressions of how the system ought to behave – they each cover lots of possible situations. An example, on the other hand, expresses a single situation that illustrates an interesting application of a rule. This expression should leave no room for ambiguity – it’s whole purpose is to clarify a rule – so we need to be specific and precise.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The term ‘concrete’ is often used to mean that we are dealing with specific details, and that is the context that we are using it in when we talk about ‘concrete examples’.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When specifying a concrete example, the context, action and outcome all need to specify concrete data. Imagine you had to actually run through the example using the real system - what data would need to be provided for you to cause the system to verifiably behave in the expected way? Use actual text strings and values - usernames, passwords, amounts of money, dates of transactions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark93">– Is all that concrete essential?</a><a name="bookmark102">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Most systems are complex enough to need large amounts of context data (e.g. refer- ence data tables, user accounts, inventories) before they can exhibit the behaviours we’re interested in. Does that mean every example has to specify all this information? That would make for very long, boring examples, so thankfully the answer is “NO!”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Each example illustrates a single rule, and should only mention concrete data that is directly related to the behaviour being illustrated. Imagine you’re writing examples that illustrate changing the delivery address after a customer places an order for a pizza. Does the example’s context need to specify the type of pizza being ordered?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Or that the customer’s payment was successfully authorized? No. There will be other rules that govern having pizza choice and successful payment. These will be illustrated by examples that focus on the essential, concrete data that relates to those behaviours. The example that illustrates changing a delivery address should only contain enough information to determine that the address change is processed correctly - nothing more.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Remember that the purpose of the requirement workshop is to use concrete examples to quickly explore the requirement and demonstrate that everyone understands exactly what is being asked for. Getting the right level of detail is not our primary concern - inessential detail will be removed later when we formulate the example as a scenario (see <a href="#bookmark105" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Formulation</a><span style=" color: #009;">³³</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark94">– How many examples do we need?</a><a name="bookmark103">&zwnj;</a></h2><p class="s37" style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark76" class="s19">Let’s have a look at the rule that our team discussed in </a><a href="#bookmark76" class="s15">Chapter 2, </a><a href="#bookmark76" class="s36">Structured </a>conversation<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="273" height="172" alt="image" src="Image_041.jpg"/></span></p><p class="s28" style="padding-top: 11pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 16 – Address change rule</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark104">The team were exploring the address change functionality and came to the conclu- sion that the address can only be changed before an order is picked up by a delivery person. This means that the delivery address can’t be changed once an order has progressed beyond the </a><i>waiting for pickup </i>state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_042.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a name="bookmark105"><span class="s20">³³</span></a>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Formulation</i><a href="http://bddbooks.com/formulation" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/formulation</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a name="bookmark106"><span><img width="509" height="102" alt="image" src="Image_043.jpg"/></span></a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 17 – Order states</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">You probably remember that there was a misunderstanding between team members during the discussion. Initially, the rule stated that the address could be changed <i>before </i>an order is <i>waiting for pickup </i>(which means it has not progressed beyond the <i>in preparation </i>state). The team resolved the misunderstanding using concrete examples, but it could still be implemented incorrectly!</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Without knowing much about the application, we can imagine that this functionality will be implemented using an <span class="s30">if </span>statement, that will look something like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">if <span class="s30">(order.State &lt;= OrderState.WaitingForPickup)</span></p><p class="s30" style="padding-top: 2pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">So, let’s imagine that Dave, who developed this feature, uses <span class="s30">&lt; </span>instead of <span class="s30">&lt;= </span>in this condition. This is the sort of mistake that is easy to make, even though the developer is fully aware of the requirement details.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The team described two examples for the rule:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;"><span><img width="393" height="118" alt="image" src="Image_044.jpg"/></span></p><p class="s28" style="padding-top: 9pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 18 – Examples for the address change rule</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In the first example, the phrase “Pizza prepared and waiting for pickup” refers exactly to the <i>waiting for pickup </i>state. This is good news, because if Dave misses the <span class="s30">= </span>from the condition, the first example will not be satisfied.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Does this mean that these two examples are <i>enough</i>? Will they catch all possible programming mistakes? Certainly not.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark107">Shall we add more examples then? Shall we capture examples for all possible states?</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark95">– Why stop now?</a><a name="bookmark108">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Catching all implementation mistakes will be important, but during the discovery phase our focus is on the requirements: <i>we would like to prevent bugs from ever happening</i>. We want to achieve this by ensuring a better understanding of the requirements. The examples that we generate during the requirement workshop il- lustrate the desired behaviour of the system. They demonstrate that the development team understand what they are being asked to do <i>and </i>that the business understands the implications of what they are asking for.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Once captured, examples make excellent test cases for use once the software has been developed, because they specify the <i>concrete </i>state of the system before a specific behaviour is exercised, as well as the expected outcome that should be observed.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When we start considering the exhaustive exploration of all possible combinations, we have moved away from understanding the requirements into the realm of software testing. When the examples start to address concerns that the product owner is not interested in, it’s time for the facilitator to bring the discussion back on track.</p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="https://en.wikipedia.org/wiki/Classification_Tree_Method" class="s19" target="_blank">This doesn’t mean that we should forget about attaining “good coverage” in our tests (e.g. using the </a><a href="#bookmark109" class="s31">Classification Tree Method</a>³⁴ <a href="https://en.wikipedia.org/wiki/Equivalence_partitioning" class="s19" target="_blank">and </a><a href="#bookmark110" class="s31">equivalence classes</a>³⁵<a href="#bookmark124" class="s19">), but this should be done by the delivery team outside the requirement workshop (see more on this in </a><a href="#bookmark124" class="s15">Chapter 4, </a><i>Who does what and when</i><span style=" color: #000;">). This will keep the conversation engaging for the product owner and the rest of the team.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="214" height="1" alt="image" src="Image_045.png"/></span></p><p class="s38" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://en.wikipedia.org/wiki/Classification_Tree_Method" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark109">³⁴</a>https://en.wikipedia.org/wiki/Classification_Tree_Method <a href="https://en.wikipedia.org/wiki/Equivalence_partitioning" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank">³⁵</a><a href="https://en.wikipedia.org/wiki/Equivalence_partitioning" target="_blank">https://en.wikipedia.org/wiki/Equivalence_partitioning</a><a name="bookmark110">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-top: 5pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark96">– Rules vs. examples</a><a name="bookmark111">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We have discussed how examples are needed to explore and illustrate each rule (requirement, business rule, acceptance criteria). We showed that rules on their own were insufficient. Let’s turn the question around: are examples alone sufficient to specify the functionality of an application?</p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark106" class="s19">Let’s look at the examples in </a>Figure 18 <a href="#bookmark104" class="s19">again. How easy would it be to deduce the rule (</a>Figure 16<span style=" color: #000;">) that they are illustrating if all you had were the examples?</span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Generally, we can say: it is not always possible to “reverse engineer” the rules from the examples, and it would certainly be easier if we never have to try to. Examples <i>illustrate </i>the rules, but they do not replace them. Whenever we capture examples, we have to make sure that we also record the rule as well, because both are needed to document the expected behaviour of the system. The rules provide the concise, abstract description, and the examples provide precise, concrete illustrations of them.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">This is nothing new - it’s how we learn anyway. When parents want to teach their young child the danger of fire, they explain that it hurts and say (“Never put your finger into a fire”). This is the rule. To illustrate this, they might put their own finger over a candle flame (smarter parents only pretend) and cry out to show that it was painful. This is the example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Why “Specification by Example”?</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You might have seen the term <i><b>Specification by Example </b></i>and assumed that this meant examples were sufficient to specify software. The intent, however, is to emphasize the <i>use </i>of examples to support a specification by making it harder for the rules to be misinterpreted.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The product owner usually wants the delivery team to solve some specific problem. She will often come to the team with a high level user story and some acceptance criteria, but where did they come from?</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The usual way we start thinking about any problem is to think about some situations in which it occurs (e.g. examples). Once a good enough understanding of the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">general problem has been understood, we’ll then try to express this as business rules or acceptance criteria. This is the process that product owners (and business analysts) frequently go through before they talk to the team. Then, in the requirement workshop, the team explores their understanding by coming up with more examples which test that the rules have been expressed correctly. Finally, the development team will write some software, and it’s the rule that gets implemented, while the examples make great test cases.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We need to document the rules even when, later, we formulate the examples into scenarios. More on this in <a href="#bookmark113" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Formulation</a><span style=" color: #009;">³⁶</span>.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">While rules and examples are extremely powerful ways to specify the behaviour of software, there are other tools that complement them. Definitions, model diagrams, formulas, glossaries and other artifacts might also be necessary as part of the specification.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark97">– My example illustrates multiple rules!</a><a name="bookmark112">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">During the requirement workshops, we break down the user stories into rules (or acceptance criteria) and then we illustrate these rules with examples. When using <i><b>Example Mapping</b></i><a href="#bookmark82" class="s19">, we would like to produce a tidy map with a collection of examples underneath each rule, something like the one shown in </a><span style=" color: #009;">Figure 14</span>. Sometimes this can be tricky. Depending on the situation, you might find an example that illustrates multiple rules at once. Is this a problem?</p><p class="s37" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark76" class="s19">As we discussed in </a><a href="#bookmark76" class="s15">Chapter 2, </a>Structured conversation<span class="p">, we use rules and examples to structure our conversations, to make our requirement workshops more efficient. To be able to focus on a particular aspect of the problem, we should try to come up with examples that are focused, ie. they illustrate only one rule.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Focusing on a rule and utilizing it are two different things though. Looking back at our example, we can see that we have multiple rules that are related to the address change. For example, we have a rule that only a valid address is accepted. We also have a rule that you can change the address only if the order has not been picked up yet. Let’s have a look at the positive example of the second rule:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_046.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a name="bookmark113"><span class="s20">³⁶</span></a>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Formulation</i><a href="http://bddbooks.com/formulation" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/formulation</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="274" height="363" alt="image" src="Image_047.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 19 – Positive example of the order state rule</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">As you can see, this example describes a successful address change and this implies that all other rules – including the valid address rule – have to be satisfied. So, we had to pick a valid address.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Let’s take a closer look at this example. Does it <i>utilize </i>the valid address rule? Yes, it does! Does it <i>focus </i>on address validity? No, it doesn’t! Does it <i>illustrate </i>the valid address rule? This is more difficult to answer, because this concrete example would probably work as a positive example even for the address validity rule. Still, the way the example has been written directs the attention to the order state and not to the validity of the address. Let’s contrast it with the positive example of the valid address rule:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 100pt;text-indent: 0pt;text-align: left;"><span><img width="274" height="363" alt="image" src="Image_048.jpg"/></span></p><p class="s28" style="padding-top: 7pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 20 – Positive example of the valid address rule</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">As you can see, the final result is the same (“Change accepted”), but the phrasing of the example helps us to focus on the address validity.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If you find yourself writing a single example that illustrates multiple rules, don’t worry. Before you finish the workshop, consider splitting the example up into several examples that each focus on a single rule. When you do this, you’ll probably find that some of the concrete data essential to illustrate one of the rules is not essential to illustrate the other(s).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark98">– The bigger picture</a><a name="bookmark114">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Short focused examples are great to illustrate the behaviour of a single rule, but don’t give you a good overview of a whole interaction with the system. Other forms</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">of documentation are useful to get a feel for how the system will behave. We often use wireframes, page-flows, and box-and-arrow diagrams of all varieties.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Remember, the Agile Manifesto asks us to value working software over comprehen- sive documentation, not to dispense with documentation entirely.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark99">– What we just learned</a><a name="bookmark115">&zwnj;</a></h2></li></ol></ol><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The requirement workshop is an excellent place to challenge the teams’ understand- ing of the requirements. In this chapter we have seen that it can take quite a bit of practice to get good at creating the concrete examples that drive away ambiguity, while keeping them easy to read and maintain. Nor are examples on their own sufficient – they need to be created to illustrate business rules, and those rules should be documented alongside the examples.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We discussed the anatomy of a good example, made up of context, action and outcome, and emphasized the need to use appropriate <i>concrete </i>data. And we’ve warned you that an example should usually illustrate a single rule and contain only data that is essential to understand the behaviour of that rule. We’ve mentioned that other forms of documentation are needed to paint the bigger picture.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Getting good takes time, but getting started is a simple matter of giving it a try. You now have enough information to make a good start. In the next chapter we’ll talk more about who does what (and when) in the BDD approach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;line-height: 90%;text-align: left;"><a name="bookmark116">Chapter 4 – Who does what and when</a><a name="bookmark124">&zwnj;</a></h1><p style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In the previous chapters, we discussed the importance of collaboration for a BDD approach to be successful. In this chapter, we will show how BDD can be integrated into the development process and answer some common questions, like “Who should write the scenarios?”, “Who do we need to participate in the requirement workshops?”, and “Should the testers or the developers automate the scenarios?”.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In this chapter we’re going to describe the BDD approach in more detail. We’ll also provide some examples of how BDD has been successfully adopted by various organizations using different development processes. Don’t treat these as best practice checklists, but rather as starting points that allow you to develop a process that fits your project.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Remember that every project is different. They follow different development pro- cesses (such as Scrum or Kanban). They are integrated into a company culture that has its own definition of what each role is responsible for. For example, how much development skill should a <i>tester </i>have? Individual team members will have different backgrounds and personalities.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The most successful projects consider all these factors when defining their develop- ment process (and understand that this process has to be reviewed and adapted as necessary).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l26"><ol id="l27"><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark117">– The BDD approach</a><a name="bookmark125">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">To be able to discuss how to integrate BDD into your development process, let’s look at the BDD approach in more detail and let’s list the different tasks or activities that are typically involved.</p><p class="s37" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark28" class="s19">You probably remember from the high level overview of the BDD approach that we provided in </a><a href="#bookmark28" class="s15">Chapter 1, </a>What is BDD?<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="530" height="242" alt="image" src="Image_049.png"/></span></p><p class="s28" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 21 – High level BDD approach</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark126" class="s19">In practice, the BDD approach is more complex and consists of several connected activities, which we will discuss in detail. To get started, take a look at the following diagram (</a>Figure 22<span style=" color: #000;">):</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="534" height="352" alt="image" src="Image_050.png"/></span></p><p class="s28" style="padding-top: 4pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 22 – Tasks and activities in the BDD approach</p><p style="padding-top: 9pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark126">The following list contains a brief overview of these tasks. In the list we describe the ideal timing, the team members involved and also the expected outcome.</a></p><h3 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">#1 – Pick a user story</h3><p class="s22" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">What: <span class="p">Requirements elicitation and prioritization.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">When: <span class="p">Before the requirement workshop – preferably at least a day in advance.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Who: <span class="p">Product owner, business analyst, customer, key stakeholders</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Outcome: <span class="p">A candidate user story, scoped with relevant business rules (acceptance criteria). There should be enough detail to allow the development team to explore the scope of the story using concrete examples.</span></p><h3 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">#2 – Requirement workshop</h3><p class="s22" style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">What: <span class="p">Discuss the user story by focusing on rules and examples.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When: <span class="p">Regularly throughout the project – we recommend running short workshops several times a week.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Who: <a href="#bookmark87" class="s19">All roles must be represented at this meeting (at least the three amigos), but multiple representatives of each role can attend. As we described in </a><a href="#bookmark87" class="s15">Section 2.6, </a><span style=" color: #009;">How to establish structured conversations</span><span class="p">, each role representative has their own responsibility and focus.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Outcome: <span class="p">The candidate story is refined, and is frequently decomposed into smaller stories, each accompanied by a set of rules and examples. The examples should be captured in as light a format as possible, and should not be written using </span>Given<span class="p">/</span>When<span class="p">/</span>Then<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">#3 – Formulate</h3><p class="s22" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">What: <span class="p">Formulate the examples into scenarios.</span></p><p class="s22" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When: <span class="p">Before the implementation of the story starts. Best done as the first task of development, but sometimes done as a separate workshop where all scenarios scheduled for the iteration are formulated.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Who: <span class="p">In the beginning, when the language and style we use to phrase the scenarios is still being established, it is recommended to do it with the entire team. Later, it can be efficiently done by a pair: a developer (or someone who is responsible for the automation) and a tester (or someone who is responsible for quality) as long as their output is actively reviewed by a business representative.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Outcome: <span class="p">Scenarios added to source control. The language of the scenarios is business readable and consistent.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">#4 – Review</h3><p class="s22" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">What: <span class="p">Review the scenarios to ensure they correctly describe expected business behaviour.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">When: <span class="p">Whenever a scenario is written or modified.</span></p><p class="s22" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Who: <span class="p">Product owner (and maybe business analyst, customer, key stakeholders).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="411" alt="image" src="Image_051.png"/></span></p><p class="s22" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Outcome: <span class="p">Confidence that the development team have correctly understood the requirements of the business; the behaviour is expressed using appropriate termi- nology.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 34pt;text-indent: 0pt;line-height: 64%;text-align: justify;">Seb’s story: Hand gun in the carry-on lug- gage</h2><p class="s3" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I was going through security at the airport and the security guard called me over after my carry-on luggage had been X-rayed. “Sir”, he said “there appears to be a hand gun in your luggage”. I was very surprised. I don’t usually travel with a hand gun!</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">It turns out that watching X-rays of other people’s luggage is not the world’s most interesting job. To keep the security guards alert, the software randomly superimposes the image of a forbidden item on the X-ray.</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Reviewing scenarios is an important job, and it’s the job of those that write the scenarios to make sure that they are interesting enough to keep their business colleagues eager to review them. It’s all too easy to write verbose, repetitive scenarios that are difficult and boring to read. When this happens, you might just get a short review response, such as “Looks fine to me”.</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">To check that the scenarios really are interesting enough to read, occasionally leave one out (or add an incorrect one). If you don’t get feedback on your deliberate mistake it probably means that you need to work with your business to understand what level of detail they are interested in having documented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">#5 – Automate</h3><p class="s22" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">What: <span class="p">Automate the scenarios by writing test automation code.</span></p><p class="s22" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When: <span class="p">Automate scenarios before starting the implementation, following a test- driven approach. This way the implementation can be “driven” by the scenarios, so the application will be designed for testability and the development team will have greater focus on real outcomes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Some teams do the automation task separately or even (especially when the appli- cation is only automated through the UI) after the implementation is finished. This approach reduces the advantages of BDD, but the end result might be still better than doing ad-hoc integration testing or no testing at all. You may find yourself working in this way as a part of a cultural change, but try to not get stuck here.</p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Who: <span class="p">Developers or test automation experts. When doing pair programming, pairing a developer with a tester works well.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Whether scenarios should be automated by developers or testers is very dependent on the company culture and the team setup. It is definitely true that for some complex, design-related aspects of the test automation infrastructure, developers are necessary. On the other hand, a good automation infrastructure may enable team members, with less coding experience, to perform automation tasks.</p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Outcome: <span class="p">Set of (failing) automated scenarios that can be executed both locally and in continuous integration/delivery/deployment environments.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">#6 – Implement</h3><p class="s22" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">What: <span class="p">Implement the application code to make the automated scenarios pass. We show this as the classic TDD cycle of Red/Green/Refactor, with programmer tests driving the implementation.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When: <span class="p">Implementation starts as soon as the first scenario has been automated, so the implementation is being driven by a failing scenario.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Who: <span class="p">Developers.</span></p><p class="s22" style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Outcome: <span class="p">A working application that behaves as specified. This can be verified automatically.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">#7 – Supplementary test</h3><p class="s22" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">What: <a href="http://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/" class="s19" target="_blank">Perform manual and other forms of testing, described in your testing strategy. This can include scripted, manual testing, exploratory testing, performance, security or other testing. For more details see quadrants 3 and 4 in the </a><a href="http://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/" class="s15" target="_blank">Agile Testing </a><a href="#bookmark127" class="s15">Quadrants</a><span class="s16">³⁷</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_052.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="http://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark127">³⁷</a><a href="http://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/" target="_blank">http://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When: <span class="p">You don’t have to wait until an entire story is finished. Scenarios provide a functional breakdown of the user story, so each scenario itself contributes a meaningful part of the application’s behaviour. Therefore, as soon as there is a completed scenario, testing activities can start. (Test preparation can start even earlier, of course.)</span></p><p class="s22" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Who: <span class="p">Testers – other team members can help with some aspects of testing, but these activities are usually coordinated by testers.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Outcome: <span class="p">High quality working application; the story is </span>done<span class="p">.</span></p><h3 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">#8 – Release</h3><p class="s22" style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">What: <span class="p">Produce a potentially shippable increment. This is the end of our cycle, but a released product should be used to gather feedback from the users, which can provide input to future development cycles – although this is out of scope for this book.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">When: <span class="p">At any time that all tests are passing, but especially at the end of an iteration.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Who: <span class="p">The development team will be responsible for producing the releasable artifacts, but there may be specialized teams that create the actual release package.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark128">Outcome: </a><span class="p">An installable release package.</span></p></li><li><h2 style="padding-top: 11pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark118">– BDD in Scrum</a><a name="bookmark129">&zwnj;</a></h2><p style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Now let’s take a look at a few examples of BDD being integrated into different devel- opment process models. We’ll start with the most commonly used agile methodology, the Scrum framework. BDD works very well with Scrum, although many people seem to be surprised by this.</p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark130" class="s19">In Scrum, work is organized into sprints that are 2-4 week iterations. There are regular workshops that focus on the customer’s requirements throughout each sprint (backlog refinement, backlog grooming,</a>³⁸ <span style=" color: #000;">sprint planning preparation, sprint planning) where user stories are prepared. At the sprint planning meeting, the team chooses a few stories to implement in the upcoming sprint. Once the sprint is done, the team presents their results in a sprint review/demo and potential process improvements are discussed in the sprint retrospective.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_053.png"/></span></p><p class="s20" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a name="bookmark130">³⁸</a><span class="s23">Scrum no longer uses the term ‘grooming’, replacing it with the word ‘refinement.’</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Requirement workshops</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Since a sprint is relatively short, and the number of stories the team usually has to deliver is small, the team can have a good overview and understanding of all the stories in the sprint backlog.</p><p class="s37" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark76" class="s19">In Scrum, there are regular meetings that focus on the customer’s requirements throughout each sprint, where user stories are prepared (backlog refinement and sprint planning preparation). This culminates at the sprint planning meeting, where the team finally commits to the details. When doing BDD, we explore and discover details of stories at these meetings. This can be achieved with the help of structured conversations (</a><a href="#bookmark76" class="s15">Chapter 2, </a>Structured conversation<a href="#bookmark84" class="s19">) and an appropriate technique, such as Example Mapping (</a><a href="#bookmark84" class="s15">Section 2.5, </a>Example Mapping in a nutshell<span class="p">).</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If the team has good access to the product owner, we recommended that you organize short Example Mapping sessions regularly, and have these replace backlog refinement meetings. You can hold them weekly, but you might consider scheduling them several times a week, or even daily. This enables a product owner to get feedback fast from the team regarding a new idea, and removes the need for informal communication (such as e-mail threads and water-cooler conversations), where any decisions made can easily be lost or forgotten. Short, daily meetings have a lot of advantages and you can always cancel a session when your team has prepared enough stories for the next sprint.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="126" alt="image" src="Image_054.png"/></span></p><h2 style="padding-top: 16pt;padding-left: 27pt;text-indent: 0pt;line-height: 79%;text-align: left;">Gaspar’s story: BDD works even when ac- cess to your product owner is limited</h2><p class="s3" style="padding-top: 5pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: left;">I worked on a complex legacy project, where we were committed to capturing scenarios for all new features. The customer was an agile IT company and they</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Examples help us focus on the outcomes, even during early discussions, which improves the effectiveness of communication. If you use Example Mapping, you will spend less time on unstructured discussions, jumping between topics and re- discussing questions that cannot be answered at the meeting. Of course Example Mapping does not make complex problems simple, but your time in the session is spent on valuable discussions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="293" alt="image" src="Image_055.png"/></span></p><p class="s3" style="padding-top: 7pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">had lots of experience with Scrum.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The domain was new to us and access to the product owner was limited. We were prepared for long and exhausting sprint planning meetings, but surprisingly, we were able to finish these meetings early, sprint after sprint.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">After one of these meetings, the product owner turned to me and asked: “How do you manage to complete the spring planning meeting so quickly? Other ones that I’ve been to are much longer and never finish on time.”</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I could not really answer him at the time, because we were not intentionally doing anything special. (This was years before Example Mapping.) However, after analyzing our meetings, we realized that our commitment to writing scenarios made us focus on examples during the discussion. We did this to make it easier to formulate scenarios later, but a side-effect was that our meetings were more structured and achieved their goal more quickly.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If the access to the product owner is limited, like in Gaspar’s story, you can still integrate the structured conversations and Example Mapping into the sprint planning meeting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Formulate</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Formulating an example as a scenario is tricky. It involves decisions about which word to use, how to construct a phrase and which verb tense to use. This can take a long time.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Establishing a shared understanding is important, but making the entire team discuss the best way to express a scenario in business language is not efficient. So generally, we would not recommend formulating scenarios during the preparation or planning meetings.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In Scrum, the best approach to formulating scenarios is to include it as a task in the story’s implementation pipeline. This means that the first task on the taskboard for a story should be the following: formulate the examples of the story as scenarios and add them to source control. If the story is related to an area of the application where the team has no automation experience, you should consider only formulating a few</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">representative examples into scenarios, so that you can check that their phrasing is convenient for automation. While automating these scenarios, you will learn more about the solution design and you can incorporate this knowledge into the formulation of the remaining scenarios.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Formulation is usually undertaken by a pair, often a developer and a tester. This makes it simpler to fit formulation into the sprint schedule, limits its cost and the subsequent review by the product owner ensures that the delivery team members really have understood what the business is asking of them.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We have seen teams doing formulation as a special workshop right after sprint planning (e.g. on the day following the sprint planning day), where the entire team split into smaller working groups, work on the formulation of the examples of all stories. Once the smaller groups have finished their work, the team discusses the results together. Although such workshops might be useful in the initial phase, when you learn about BDD and the domain language, it might put quite a significant administrative overhead on the team (yet another fixed day where everyone is expected to be present).</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In some projects, the scenarios have to be formally approved by the product owner or someone else. In these cases, the formulation has to be prioritized and planned in a way that the team does not get blocked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">How scenarios help with the decomposition into tasks</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In Scrum, stories are usually broken down into tasks. Tasks are work units that represent the design decisions of the team and they are also used to track the daily progress of the team.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The tasks are owned by the development team. The team can list anything as a task that needs to be completed to be able to finish the story. The tasks are often very technical (e.g. create a <span class="s30">Users </span>table) and do not have to be understandable by the Product Owner.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Examples and scenarios are the opposite – they describe a functional breakdown of the story and they are business-readable. Because of this, it initially seems like BDD has nothing to do with Scrum tasks and task planning. The reality is somewhat different, though. Once you have illustrated the story with a couple of key examples,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">the task planning becomes easier. The key examples paint the big picture and reveal the design decisions that need to be made.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Tasks are usually technical, but where practical you should try to create them so that each one relates to a single example (scenario) e.g. “Create tables for capturing the delivery address” instead of a generic “Create tables” task. This is not possible for all tasks – there might be some tasks on which several scenarios depend.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">By aligning tasks to scenarios, the development team will realize several benefits:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l28"><li><p class="s16" style="padding-left: 35pt;text-indent: -10pt;text-align: justify;"><a href="https://en.wikipedia.org/wiki/Outside%E2%80%93in_software_development" class="s19" target="_blank">The team will focus on the expected behaviour during the implementation. This can help avoid “gold-plating” or implementing infrastructures that are not needed. Starting from the scenario helps follow an </a><a href="#bookmark131" class="s15">outside-in³⁹</a> <span style=" color: #000;">development approach.</span></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">You can get feedback about the story implementation earlier. Imagine you have a half-done story, where all the database tables are created, but nothing is visible for the users. Now compare it with a half-done story, where 3 of the 7 scenarios are already implemented end-to-end. The latter can be shown to the product owner to get feedback on what has been implemented so far.</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">Manual testing can be started before the story is fully implemented. The execution report of the story scenarios will show which functional parts of the story are ready for testing, so testers do not require status reports to be created.</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">The functional progress provides better transparency and hence increases the trust between the development team and the product owner. A progress status of 57% means nothing, but demonstrating that 3 scenarios out of 7 are already working is an achievement that can be easily understood.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">For stories that involve only simple design decisions, task planning is more about having a checklist so that nothing is forgotten. For these stories, scenarios can also be used directly as tasks. e.g. “Automate &amp; implement scenario: Delivery address is captured”.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Some teams might even skip creating tasks – if the company process rules allow this. When the stories are small enough (and nicely decomposed into rules and examples) making an additional taskboard might not provide further benefits.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_056.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://en.wikipedia.org/wiki/Outside%E2%80%93in_software_development" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark131">³⁹</a><a href="https://en.wikipedia.org/wiki/Outside%E2%80%93in_software_development" target="_blank">https://en.wikipedia.org/wiki/Outside%E2%80%93in_software_development</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="397" alt="image" src="Image_057.png"/></span></p><h2 style="padding-top: 9pt;padding-left: 34pt;text-indent: 0pt;line-height: 79%;text-align: justify;">Gaspar’s story: Scenarios in the sprint re- view</h2><p class="s3" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I was working on a project where the customer was not involved directly in the BDD process, or at least she was not aware of it. She knew about Scrum and regularly participated in the Sprint reviews.</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Our review was more or less typical: we went through the stories we had done and demonstrated the new features of the application. The only thing we did differently was that before starting the demonstration of a story we showed the related scenarios and read them out loud. This acted as an introduction for the upcoming demo.</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">After a few sprints, I intentionally “forgot” to show her the scenarios before the demo and waited to see her reaction. I got what I wanted to hear: she was missing those “nice summaries” that helped her remember the details and give better feedback.</p><p class="s3" style="padding-top: 6pt;padding-left: 34pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Later, we started to use examples and scenarios in the requirement workshops as well, where they helped clear up misunderstandings before the story ever made it onto a sprint backlog.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><h2 style="padding-top: 10pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark119">– BDD in Lean/Kanban</a><a name="bookmark132">&zwnj;</a></h2><p class="s16" style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark133" class="s15">Kanban</a>⁴⁰ <span style=" color: #000;">and other lean approaches to managing software projects are also popular nowadays, especially with development teams that are responsible for operations. Kanban optimizes end-to-end delivery (“lead time”) by visualizing the workflow and limiting work in progress (WIP) to be able to detect and fix bottlenecks more easily.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_058.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://en.wikipedia.org/wiki/Kanban" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark133">⁴⁰</a><a href="https://en.wikipedia.org/wiki/Kanban" target="_blank">https://en.wikipedia.org/wiki/Kanban</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="38" height="38" alt="image" src="Image_059.png"/></span></p><p class="s3" style="padding-top: 4pt;padding-left: 66pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="#bookmark135" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt;">If you are already familiar with Scrum and you would like to learn more about Kanban, we can recommend the mini book by Henrik Kniberg &amp; Mattias Skarin “Kanban and Scrum - Making the Most of Both” </a><span style=" color: #009; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt;">⁴¹</span>. The ebook version is available for free.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The discussion and implementation activities of the BDD approach are scoped to user stories, which are the typical work unit tracked on Kanban boards. Short, regular or ad-hoc Example Mapping sessions can be used to feed the input queues of the development team whenever the capacity (the WIP limit) allows.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If the scenario automation process requires special skills or expertise, you can visual- ize this on the Kanban board as a separate column, if this helps to optimize the flow (e.g. if UI automation becomes a bottleneck). Be careful with this though, because more separation of <i>automation </i>and <i>implementation </i>might reduce the positive impact of the test-driven approach we follow with BDD.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Each user story is an independent work unit, but the scenarios that illustrate its behaviour can be implemented individually. BDD tasks and activities are related to the scenarios – not the story.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Actually, the tasks <i>formulate</i>, <i>automate</i>, <i>implement</i>, <i>review </i>and <i>supplementary test </i>can be seen as a sub-workflow. This can, in principle, be visualized on the Kanban board. Keep in mind that <i>less is more </i>and make sure that this kind of tracking actually provides some benefit for your development process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark120">– BDD in Distributed Teams</a><a name="bookmark134">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Having a distributed team is common nowadays. In these projects the physical distance is typically combined with time zone differences, cultural distance and language barriers, as well.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">However, BDD in distributed teams is carried out in the same way as for colocated teams. There are the additional communication challenges faced by all distributed teams, but the concrete examples produced during the requirement workshop can</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_060.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark135"><span class="s20">⁴¹</span></a>Kniberg, Henrik, Mattias Skarin, Mary Poppendieck, and David Anderson. <i>Kanban and Scrum: Making the Most of Both</i>.</p><p class="s38" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: justify;"><a href="https://www.infoq.com/minibooks/kanban-scrum-minibook" class="s32" target="_blank">United States: InfoQ, 2010. Print/Web. </a>https://www.infoq.com/minibooks/kanban-scrum-minibook<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">reduce this by providing a tangible representation of the agreed behaviour of the system. Good audio-visual facilities and collaborative online tools are essential.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Providing information about the scenario implementation status (e.g. with an ex- ecution report updated as part of the CI build), can lead to improved cooperation between developers, testers, and product owners. Testers and product owners can get information directly from the scenario execution reports when they need to see if manual testing needs to be performed or if they need to make a progress report. They don’t have to wait until everyone provides status information.</p><h3 style="padding-top: 9pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Requirement workshops with distributed team</h3><p style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The real challenge with distributed teams is finding some way to run the requirement workshops effectively, without losing the benefits of collaboration.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark84" class="s19">Example Mapping, which we have described in </a><a href="#bookmark84" class="s15">Section 2.5, </a><a href="#bookmark84" class="s36">Example Mapping in </a><span class="s37">a nutshell </span>uses index cards and direct communication to discover the requirement details, so some modifications will be needed for remote meetings. Let’s remind our- selves of the most important characteristics of Example Mapping before considering how we might facilitate a <i><b>remote requirement workshop</b></i>:</p><ul id="l29"><li><p style="padding-top: 10pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">focus on rules and examples when discussing the story</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">nominate a facilitator who keeps the meeting going</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">collect results in a format that all team members can understand, so that they can challenge them if necessary</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">capture questions that block the discussion and make them visible to everyone</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">provide an easy way to have an overview of what we have discussed already</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">produce shared notes</p><p style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The challenge is to find a way that works for your team that still delivers these characteristics. At the time of writing this book, we are not aware of any online Example Mapping tool, but it is likely that such tools will be available soon.</p><p class="s16" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark137" class="s19">Currently the best result can be achieved by using Google Sheets that you share on the screens / projectors at all locations. The </a>Figure 23 <a href="#bookmark76" class="s19">shows the same example map we showed in </a><a href="#bookmark76" class="s15">Chapter 2, </a><i>Structured conversation </i><a href="#bookmark82" class="s19">(</a>Figure 14<span style=" color: #000;">) using </span><span class="s18">Google Sheets </span><a href="http://speclink.me/examplemaptemplate" class="s19" target="_blank">(download template </a><a href="#bookmark136" class="s15">here</a>⁴²<span style=" color: #000;">). Alternatively you can use a mind mapping tool as shown</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_061.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="http://speclink.me/examplemaptemplate" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark136">⁴²</a><a href="http://speclink.me/examplemaptemplate" target="_blank">http://speclink.me/examplemaptemplate</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="#bookmark138" class="s19">in </a>Figure 24<a href="https://www.mindmup.com/" class="s19" target="_blank">, created using </a><a href="#bookmark139" class="s35">MindMup 2</a>⁴³<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="391" height="294" alt="image" src="Image_062.jpg"/></span></p><p class="s28" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 23 – Example map in Google Sheets</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 36pt;text-indent: 0pt;text-align: left;"><span><img width="448" height="244" alt="image" src="Image_063.jpg"/></span></p><p class="s28" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;"><a name="bookmark137">Figure 24 – Example map in mind map form</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_064.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://www.mindmup.com/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark138">⁴³</a><a href="https://www.mindmup.com/" target="_blank">https://www.mindmup.com/</a><a name="bookmark139">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark141" class="s19">For simpler stories, you can also use any note-taking application and share it on all screens. If the application supports this, you can collapse different detail levels, so that you can still have an overview of what you have discussed so far. The </a>Figure 25 <a href="https://www.onenote.com/" class="s19" target="_blank">shows such an example with </a><a href="#bookmark142" class="s35">Microsoft OneNote</a>⁴⁴<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"><span><img width="394" height="268" alt="image" src="Image_065.jpg"/></span></p><p class="s28" style="padding-top: 6pt;padding-left: 74pt;text-indent: 0pt;text-align: center;">Figure 25 – Example map in a form of hierarchical notes</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark121">– BDD in fixed scope projects</a><a name="bookmark140">&zwnj;</a><a name="bookmark141">&zwnj;</a></h2><p style="padding-top: 18pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Projects with fixed price, fixed scope, fixed “everything” are definitely not ideal for agile software development, especially when we’re building highly complex, sophis- ticated and usable applications in a rapidly changing business environment. These applications typically have to integrate other external services and use disparate technologies. In this sort of environment, pretending that we can commit to scope, price and time is an illusion.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Despite this, there are many examples of projects that have to operate under these constraints. Reasons include a slowly changing company culture or over-rigid project tendering rules.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_066.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="https://www.onenote.com/" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark142">⁴⁴</a><a href="https://www.onenote.com/" target="_blank">https://www.onenote.com/</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Can BDD be integrated into such project environments? Can it still deliver benefits? Let’s try to answer these questions.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Typical fixed scope projects are provided with a detailed specification document that is supposed to describe all the necessary details to provide a cost estimate. Sometimes the specification is also used by the development team to implement the application itself.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">These specification documents are of varying quality. Some go into too much detail. Others skip blithely over complex functionality with barely a mention. It’s not uncommon to see both shortcomings in the same document!</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Nonetheless, the estimation team studies the document and associates a price tag (man-days, story points, etc) for each function. If the price is accepted, the team has to do the hard work: implement the application on the basis of the specification document, with the constraint of the attached price tag of the individual features.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">A large portion of the work is about understanding the domain and trying to provide solutions for the requirements that satisfy the customer, stay within the scope of the original, contracted specification document, and stay within budget. There will be a lot of decisions (large and small) to make and, since the team is under the illusion that “everything was specified”, they don’t focus on documenting these decisions. These implicit and untracked decisions regularly lead to problems with change tracking and final acceptance.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In this situation BDD can help to provide a frame for domain discovery and for documenting the detailed requirement decisions the team makes.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">One possible approach to achieve this is to use Example Mapping to prepare the individual features for development. Whenever the team is about to implement the next feature, they all study the related sections of the specification document and build an example map with all the rules and illustrative examples that they can discover. Once they have a better overview of the feature, they can match it to the expected budget and can then cut the scope if necessary. This is still very rough guesswork of course, but at least you have a better overview of the feature, so that you can make your cuts in a way that keeps the overall integrity of the feature intact. This might also include a couple of round trips to the customer, if possible. Once the scope decisions have been made, the team can progress with the development process, formulating the illustrative examples as scenarios that can drive the implementation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">of the feature.</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">As a result, you can transform the static (and probably already outdated) specification document into a continuously validated living document. This will not solve the problems introduced by the gap between the details described in the specification document and the details that are required to implement the application, but at least it will make the decisions explicit. Living documentation offers a way to track (and correct) decisions that turn out to have been wrong, as well as providing a mechanism for managing change requests.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Once you have gained the trust of the customer – and readable living documentation is definitely a big help with that – you will have a better chance to negotiate agile contracts with them later on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark122">– BDD in regulated environments</a><a name="bookmark143">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Operating in a regulated environment brings a higher level of expectation on traceability. The exact requirements and goals might depend on the concrete project, but generally the process should focus on the following areas:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l30"><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">completeness and correctness of the specification</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">coverage provided by the tests and the testing strategy in general</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">evidence that the testing has been performed for a particular version</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Behaviour Driven Development provides a combined representation of the specifi- cations and the tests. Let’s look at some important characteristics of the BDD process that might be relevant for these projects:</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">The scenarios are selected initially to be illustrative examples of the specifica- tions. The aim is to ensure consistency and shared understanding across the team.</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">The set of scenarios can be extended by further test cases using the same format, to reach the coverage prescribed by the testing strategy.</p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: justify;">The scenarios are business readable and they bring together the specification and the tests. This duality ensures a higher consistency and linkage between these areas.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 4pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">The scenarios are strictly versioned, together with the application code.</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">BDD tools typically execute scenarios directly and produce a report of the execution result.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">These statements about the BDD approach show that it is not only a good foundation for projects operating in regulated environments, but the living documentation satisfies the regulatory requirements better than classic processes. The improved efficiency comes from the fact that the scenarios are business readable, so you don’t have to maintain a separate document for the tests. The code and tests become self- documenting. If you run your automated scenarios and generate a report from the execution, this report will:</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">document the expected behaviour</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">describe the tests that have been used to verify the behaviour</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">provide evidence of the execution results for a particular version of the product.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="266" alt="image" src="Image_067.png"/></span></p><h2 style="padding-top: 18pt;padding-left: 27pt;text-indent: 0pt;line-height: 71%;text-align: justify;">Agile practices are welcomed by regula- tors</h2><p class="s3" style="padding-top: 5pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="https://my.aami.org/store/detail.aspx?id=TIR45" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt;" target="_blank">The guidance on the use of agile practices in the development of medical device software  (</a><a href="https://my.aami.org/store/detail.aspx?id=TIR45" class="s25" target="_blank">AAMI  TIR45:201</a><a href="#bookmark145" class="s25">2</a><span style=" color: #009; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt;"></span><a href="https://www.federalregister.gov/documents/2013/01/15/2013-00605/food-and-drug-administration-modernization-act-of-1997-modifications-to-the-list-of-recognized" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt;" target="_blank">)  has  been  published  by  the  Association  for  the Advancement of Medical Instrumentation (AAMI). Since 2013 this report has been a </a><a href="https://www.federalregister.gov/documents/2013/01/15/2013-00605/food-and-drug-administration-modernization-act-of-1997-modifications-to-the-list-of-recognized" class="s25" target="_blank">part of the recognized standard</a><a href="#bookmark146" class="s25">s</a><a href="#bookmark146" class="s26"></a><span style=" color: #009; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt;"> </span>by the U.S. Food and Drug Administration (FDA).</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The report addresses the usage of executable requirements in the regulated context (Section 3.6.5):</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">“<i>The challenge comes with providing a reviewable requirements documenta- tion package to regulators. A team must ensure the readability of whatever</i></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">The report generation has to be well prepared in order to meet the formal require- ments of the regulators. Even though the regulator will need additional documents (e.g. designs, architectures, state diagrams), BDD ensures that the most volatile part of the regulatory report is automated and integrated into the development process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="198" alt="image" src="Image_068.png"/></span></p><p class="s29" style="padding-top: 7pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">requirements are pulled from the set of EXECUTABLE REQUIREMENTS. Use of formal, more English-like words in the requirements definition will facilitate this readability, as will the use of tools to package and organize requirements into a comprehensible outline.</p><p class="s29" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">EXECUTABLE REQUIREMENTS can be used as part of a final requirements</p><p class="s41" style="padding-left: 27pt;text-indent: 0pt;text-align: left;"> <i>documentation mechanism.</i>”      </p><p style="padding-top: 2pt;padding-left: 46pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="https://my.aami.org/store/detail.aspx?id=TIR45" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank"></a><a href="https://my.aami.org/store/detail.aspx?id=TIR45" target="_blank">https://my.aami.org/store/detail.aspx?id=TIR45</a></p><p style="padding-left: 27pt;text-indent: 18pt;text-align: left;"><a href="https://www.federalregister.gov/documents/2013/01/15/2013-00605/food-and-drug-administration-modernization-act-of-1997-modifications-to-the-list-of-recognized" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank"></a><a href="https://www.federalregister.gov/documents/2013/01/15/2013-00605/food-and-drug-administration-modernization-act-of-1997-modifications-to-the-list-of-recognized" class="a" target="_blank">https://www.federalregister.gov/documents/2013/01/15/2013-00605/food-and-drug-administration- </a><a href="https://www.federalregister.gov/documents/2013/01/15/2013-00605/food-and-drug-administration-modernization-act-of-1997-modifications-to-the-list-of-recognized" target="_blank">modernization-act-of-1997-modifications-to-the-list-of-recognized</a></p><p style="text-indent: 0pt;text-align: left;"/></li></ul></li><li><h2 style="padding-top: 11pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark123">– What we just learned</a><a name="bookmark144">&zwnj;</a><a name="bookmark145">&zwnj;</a><a name="bookmark146">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">BDD is a straightforward set of practices that, when combined, can significantly im- prove the quality of your team’s development process. In this chapter, we expanded on the high level view of the BDD approach, to see the different activities that you’ll work through. We looked at when each of these activities is suitable and which team members should be involved.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Because we understand that your teams differ, we looked at how BDD integrates with various common development methodologies and team configurations. There are more ways of working than Scrum and Kanban, but with an understanding of these you should be able to see how to adapt the BDD approach to your workplace. Whether you’re working in a perfect agile fairyland or struggling with fixed price projects, you’ve seen how BDD can fit in.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We also discussed how, with appropriate technology support, BDD can work well for distributed teams, acting as an aid to collaboration. The unambiguous feature files act as a single source of truth that can ease the difficulties experienced when working across geographies and time zones, as so many of us do.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Every organization is different, though, so treat the approaches described in this chapter as starting points and refine them in your retrospectives until they fit your team perfectly.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;line-height: 90%;text-align: justify;"><a name="bookmark147">Chapter 5 – How to get business involved</a><a name="bookmark152">&zwnj;</a></h1><p style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We have already explained how the most important element of Behaviour Driven Development is collaboration. Collaboration means that team members with dif- ferent roles work together to deliver working software. A team will include both the business (product owners, project sponsors, business analysts, etc.) and technical personnel (such as developers, testers, UX experts and operation staff). It’s a common mistake to focus just on collaboration between delivery team members.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In this chapter we would like to share our experiences of how to get business representatives fully involved in the BDD approach and what kind of challenges they might face. You’ll see that we believe the key to successfully adopting BDD is to demonstrate to the business the value of collaborating with the delivery team. There is no fixed recipe for this – you’ll need to develop and refine your strategy depending on your project context.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">“The proof of the pudding is in the eating” – in the end, seeing the immense value that results from practicing real collaboration is the only way to demonstrate that BDD can work in your context. Our aim is to give your team enough enthusiasm to give BDD a try.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l31"><ol id="l32"><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark148">– Learn from you peers</a><a name="bookmark153">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The key benefits typically attributed to BDD are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l33"><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">reduced cycle time</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">reduced rework/rejections</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">reduced number of production issues</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">keeping the implementation costs of new features under control</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s16" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark155" class="s19">Although we provided reasoning that supported these benefits, nothing is more convincing than learning about existing projects that have applied BDD successfully. There are lots of excellent case studies in the book by Gojko Adzic “Specification By Example” </a>⁴⁵<span style=" color: #000;">, but it’s even better to talk to people that have actually participated in a successful BDD project. The best place to meet these people is at conferences and user groups.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ul></li><li><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark149">– The one where the business is not involved</a><a name="bookmark154">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Frequently, the BDD approach is introduced by the team or vendor that is responsible for delivering the solution. The business has probably not been involved in the BDD approach from the start. They might not have even heard of Behaviour Driven Development. In these cases, the team needs to find a way to “sell” BDD to them, by convincing them that their participation in this approach will help to deliver better results.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If you have ever tried to sell a new method or process to the business (especially one with a TLA – a three letter acronym), you’ll know that this can be challenging. The business might:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l34"><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">have a default resistance against new methodologies</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">see this approach as an overhead</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">be afraid of learning and infrastructure costs</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">have formal or legal distance from the team (e.g. the business representative is a part of the customer, not the vendor)</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">see BDD as a testing or a development technique</p></li></ul></li></ol></ol></li></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">In some situations, teams might try to apply BDD without involving the business. This is sometimes called <i><b>developer-only BDD </b></i>or <i><b>tester-only BDD </b></i>and should be considered a Bad Thing™. A lot of teams and projects claim to practice BDD without involving the business and some of them seem to be happy with this. This is because</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_069.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 6pt;text-indent: 15pt;text-align: left;"><a name="bookmark155"><span class="s20">⁴⁵</span></a>Adzic, Gojko. <i>Specification by Example: How Successful Teams Deliver the Right Software</i>. Shelter Island, NY: Manning, 2011. Print.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="528" height="273" alt="image" src="Image_070.png"/></span></p><h2 style="padding-top: 17pt;padding-left: 28pt;text-indent: 0pt;line-height: 79%;text-align: justify;">Seb’s story: You Keep Using BDD, I Do Not Think It Means What You Think It Means</h2><p class="s3" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I’ve visited a lot of teams that don’t have the business involved in “BDD”. We have charitably described them as “developer-only” or “tester-only” BDD, but I tend to think of them as not following BDD at all. At best, they are using tools that were designed to support collaboration as expensive test automation platforms. The outcome is usually suites of automated tests that are slow to execute, hard to maintain and of limited value to the organization. They would get more value from dedicated test automation tools.</p><p class="s3" style="padding-top: 6pt;padding-left: 28pt;text-indent: 0pt;text-align: justify;">BDD is about collaboration. Using a BDD tool, or automating tests using <i>Given</i>/<i>When</i>/<i>Then</i></p><p class="s3" style="padding-left: 28pt;text-indent: 0pt;text-align: justify;">doesn’t make your development approach BDD in the slightest.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">collaborating at the development team level can still introduce clear guidance for how testing and test automation should be performed. Having this approach in place is better than an ad-hoc, chaotic testing strategy, but it does not deliver the massive benefits that are available by involving the business as well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Without the business involved, unless the team is very business-focused and dis- ciplined, the scenarios become technical, data-driven and dry. This means that the business get very little value from reading the scenarios and, consequently, won’t understand the implication of a failing scenario. This removes the possibility that the scenarios will provide a constructive feedback loop between the business and delivery team – so the scenarios become an overhead.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">As we said earlier, the way BDD can “win” for the business depends on the project context. In some cases, the <i>developer/tester-only BDD </i>can be a step in this strategy. With the systematic, business-focused application of BDD, you can gather enough knowledge and examples, to demonstrate the benefits of BDD to the business, giving you a better chance of convincing them.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If you happen to be in the situation where you practice BDD, but your business is not involved (yet), consider the following advice:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l35"><ol id="l36"><ol id="l37"><li><p style="padding-left: 35pt;text-indent: -13pt;text-align: left;">Consider your situation as a temporary solution that you use as a step towards</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 35pt;text-indent: 0pt;text-align: justify;">full collaboration.</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -13pt;text-align: justify;">Think about your scenarios as business examples. Try to imagine how the business would explain the “story” behind the scenario. Use realistic data and business-readable phrases. Testers can be a big help in this, as typically they act as a mediator between the requirements and the solution.</p></li><li><p style="padding-top: 1pt;padding-left: 35pt;text-indent: -13pt;text-align: justify;">Try to focus your detailed requirement discussions on examples. The business does not have to know that you’re practicing BDD. “Could you please give a concrete example!” is a valid question in any process.</p></li><li><p class="s37" style="padding-top: 1pt;padding-left: 35pt;text-indent: -13pt;text-align: justify;"><a href="#bookmark128" class="s19">Present your results and methods to the business regularly and watch their reactions to figure out which aspects of BDD they find most useful. (Gaspar’s story in </a><a href="#bookmark128" class="s15">Section 4.2, </a>BDD in Scrum <span class="p">about showing scenarios in the sprint review is a good example of this.)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">We’ve worked with many teams that initially resisted adopting a BDD approach because: “We cannot apply BDD, because our business does not want to be involved”. You could try following a BDD approach without business involvement, as a first step</p></li></ol></ol></ol></li><li><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">you’ll get all the benefits outlined above and, in time, your business colleagues will come to appreciate the value of expressing the acceptance criteria as plain English scenarios.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l38"><ol id="l39"><li><h2 style="padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark150">– BDD is for solving problems</a><a name="bookmark156">&zwnj;</a></h2><p class="s37" style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark124" class="s19">Once you are into the daily routine of BDD, you could explain it to your product owner in a way that highlights Example Mapping, formulation and automation. Or, you could explain the BDD as a process, as we did in </a><a href="#bookmark124" class="s15">Chapter 4, </a><a href="#bookmark124" class="s36">Who does what and </a>when<span class="p">.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">This might work for some people, however, presenting BDD in this way doesn’t seem to be very appealing when talking to business team members. The problem is similar to one that we come across on a daily basis: focusing on the solution instead of the problem itself. BDD has no value unless it is helping you solve problems, improve development efficiency, and produce better results. In order to get your business colleagues engaged, you have to find the pain points (or opportunities) that exist in your current process. If there are no problems, and everything is just perfect, there is no need to introduce BDD.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Identifying these challenges is an important first achievement, from where you can build up sound justification for trying alternative approaches. It is impossible to enumerate all the different kinds of problems or challenges your project might face, but the following section provides a brief list of typical issues and the solutions that BDD can provide.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Product owner is overloaded</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">It might sound counter-intuitive, but BDD can help reduce the product owner’s workload.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The lack of business availability is a common counter-argument to adopting BDD. “If they are already overloaded, increasing their level of collaboration would make them even more so.”, is a typical response, but it doesn’t have to be that way. Regardless of whether you use BDD or not, in the end the product owner has to provide the input that is needed to implement the application. Our goal with BDD is to improve communication efficiency by focusing on early, direct communication with the business, ensuring fewer misunderstandings and less rework. The following list compares the activities that product owners spend their time on in a BDD and a classic agile development approach.</p><p class="s22" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">BDD product owner activities</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l40"><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">participate in requirement workshops (e.g. Example Mapping)</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">review the scenarios</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">give feedback about the implemented application</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Classic product owner activities</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 35pt;text-indent: -10pt;text-align: left;">writing specifications</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">presenting the stories to the team</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">discussing ad-hoc questions during implementation</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">collecting deviations from the expected result in the Sprint review</p></li><li><p style="padding-top: 2pt;padding-left: 35pt;text-indent: -10pt;text-align: left;">managing and prioritizing requirement-related bugs</p></li></ul></li></ol></ol></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If you compare the collaboration time needed from the product owner with the efforts needed in a classic development process, you can see that although BDD needs time spent collaborating and reviewing, we avoid re-discussing the same topics over and over again and the work is distributed throughout the team (e.g. scenarios written by the team will replace the written specification).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Production issues are common</h3><p class="s16" style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark157" class="s19">Production issues are costly: as analyzed by an IBM study</a>⁴⁶<span style=" color: #000;">, the cost of a production issue is 30 times higher than “fixing” the same issue during the preparation phase. They are not only costly to fix, but they can easily result in customer dissatisfaction and mistrust.</span></p><p class="s37" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark45" class="s19">In </a><a href="#bookmark45" class="s15">Section 1.3, </a>What about testing? <span class="p">we described the relationship between BDD and testing: our goal is to prevent production issues being introduced during requirement analysis and detailed specification. The resulting reduction in production issues is the most easily measurable benefit of applying the BDD approach.</span></p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">If production issues are common in your project, you need to take immediate steps to improve the situation. While the problem will probably need to be addressed from several angles, introducing BDD can certainly contribute to the ultimate solution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">It is hard to get the product to a deliverable state</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">There is a huge, frequently underestimated gap between implementing a feature and bringing it to a releasable state. There are a lot of “smallish tasks” you need to take care of, like creating deployment packages, updating user documentation or verifying performance requirements. Experience shows that these tasks are often deferred until the story (or release) is ‘almost done’. Since the effort required for these activities is usually underestimated, the result is functionality that can be (partially) demonstrated, but still can’t be released to the users.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">To ensure that the application can be reliably released at short notice, the team should follow the <i><b>continuous delivery </b></i>(CD) approach. Continuous delivery requires the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_071.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 6pt;text-indent: 15pt;text-align: justify;"><a name="bookmark157"><span class="s20">⁴⁶</span></a>Briski, Kari Ann, Poonam Chitale, Valerie Hamilton, Allan Pratt, Brian Starr, Jim Veroulis, and Bruce Villard. <i>Minimizing Code Defects to Improve Software Quality and Lower Development Costs</i><a href="ftp://ftp.software.ibm.com/software/rational/info/do-more/RAW14109USEN.pdf" class="s32" target="_blank">. IBM, Oct. 2008. Web. </a><a href="ftp://ftp.software.ibm.com/software/rational/info/do-more/RAW14109USEN.pdf" class="a" target="_blank">ftp://ftp.software.ibm.com/ </a><span style=" color: #009;">software/rational/info/do-more/RAW14109USEN.pdf</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">team to work on the application in short cycles, where each cycle contains all necessary steps to make the application deliverable. Since these cycles might be really short (often shorter than a day), a high level of automation is required to perform the necessary verification and packaging steps.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: justify;">Seb’s story: Delivery is not deployment</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">CD could stand for either <i>Continuous Delivery </i>or <i>Continuous Deployment </i>– these are not the same thing. Just because an application is in a deliverable state, does not necessarily mean that you will release it to end users. Whether a particular deliverable is released or not is a business decision, not simply a quality control decision.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The process that automatically builds, tests and packages each product increment as a potential deliverable, is called <i><b>continuous  delivery</b></i>.  The  process  that also automatically releases each deliverable to end users is called <i><b>continuous deployment</b></i>.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Continuous deployment is not necessarily applicable for all kinds of applications, but continuous delivery can be applied to all projects.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">To move towards continuous delivery, stories should be sliced up into very small chunks. In Scrum the implementation of a feature or a user story is broken down to technical implementation tasks. Sometimes teams adopt an inadvisable approach called <i><b>horizontal slicing</b></i>, where tasks are defined along the different layers of the application (e.g. “implement the data access layer for the story”). If the story is broken down in these ways, the application can only reach the deliverable state when all tasks are done and the entire story is finished.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The scenarios we use in BDD provide a <i>functional breakdown </i>of the story. Every scenario represents a part of the expected behaviour and makes sense on its own (<i><b>vertical slicing</b></i><a href="#bookmark128" class="s19">). Even better, each scenario can act as a work unit (see </a><a href="#bookmark128" class="s15">Section 4.2, </a><span class="s37">BDD in Scrum</span>). If you routinely include the “smallish tasks” in the implementation of every scenario, you will keep the application in a releasable state. Now you’re well placed to adopt continuous delivery or even continuous deployment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">It is hard to get customers engaged with the product</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Nothing is more frustrating than delivering a good quality product that is not liked or used by the end users. While there are many reasons that cause this to happen, it can indicate a development process that does not focus on user value. You might be in this situation because your project organizes the work using <i>horizontal slicing </i><a href="http://www.innolution.com/resources/glossary/technical-stories" class="s19" target="_blank">and </a><a href="#bookmark158" class="s31">technical stories</a><span style=" color: #009;">⁴⁷</span>.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Since BDD encourages the team to focus on realistic examples of application behaviour, the product tends to evolve in line with the users’ viewpoint. Also the collaboration techniques used by BDD can help UX experts get involved early in the design phase.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Deadlines are often missed</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Deadlines, at least those ones you can miss, are set based upon an estimate of how long it will take to deliver the set of required features (the scope). However, as the name implies, estimates are just an estimation. They can be wrong… and often are. If the scope to be reached is fixed, there is not much you can do to meet the deadline if the estimate was wrong. You can force the team to work overtime, or you can allocate more staff, but these methods rarely provide an effective, long-term solution.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The key to the successful management of deadlines is to allow more flexibility in the scope: “Try to implement as much value as we can for the given deadline.”</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">BDD will not tell you how to cut the scope, but it gives you a framework for enabling functional cuts, even within a user story. Scenarios provide a functional breakdown of the story, and give you the opportunity to reduce the scope by identifying and deferring lower priority behaviours when you are under time pressure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Hard to get a good overview of the progress</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Having a good overview of progress is essential to good project management. With a good overview, you have warning that meeting the deadline is in danger early enough to take action. Delivered scenarios are an excellent indicator of progress,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_072.png"/></span></p><p style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="http://www.innolution.com/resources/glossary/technical-stories" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt;" target="_blank" name="bookmark158">⁴⁷</a><a href="http://www.innolution.com/resources/glossary/technical-stories" target="_blank">http://www.innolution.com/resources/glossary/technical-stories</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">because you can track which behaviours are actually supported by the application. The traditional approach of calculating an arbitrary percentage of work completed, is not nearly as effective.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 6pt;text-indent: 0pt;line-height: 94%;text-align: left;">Introduction of new features causing unwanted side-effects</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The success of a great new feature in the application can easily be overshadowed by a bug that gets introduced at the same time. And if a subsequent bug fix introduces two more defects, then all the excitement will vanish. As the code-base grows the chance of a change producing unwanted side-effects increases. This can lead to a seemingly endless increase in the implementation cost of new features. In the worst case, this can lead to a “rewrite-project”.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Adopting BDD encourages good automated test coverage, where automated tests and scenarios are tightly connected to the requirements. Once a change causes a failing test, it is easy to diagnose whether this problem is related to contradictory requirements or defects in the code. The automated scenarios provide a useful safety net that protect you from unwanted side-effects and help keep the cost of implementing a new feature constant as the product evolves. Instead of being afraid to change the code, the development team is safe to experiment and see how the application reacts to them.</p><h3 style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Not being able to react fast enough to market changes</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In order to be able to catch up with the competitors, in a changing market, you have to establish a development model that keeps the cost of implementing new features low, while maintaining the quality of the application. Observing it from this angle, it becomes clear that the problem is closely related to the previous discussion of unwanted side-effects, so the same conclusions are also valid here.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Furthermore, we should also highlight that experiments are not only valuable at the code level (i.e. changing the code to see what happens), but also at the specification level. With the specification language you build up for expressing the scenarios, you have developed a framework within which the product owner or the business analyst can investigate how the system behaves with different parameters or different user workflows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">“Bug vs. feature” debates within the team</h3><p style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Too often, developers and testers build up their own solutions independently: the developers write the application code, the testers write the test cases. This redundancy might result in conflicts at the point when the two parallel worlds meet: when the test cases are used to test the application. These are the typical “Bug vs. feature” debates.</p><p class="s37" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark107" class="s19">The rework and frustration caused by these debates can be avoided by reducing the redundancy and encouraging developers and testers to work on understanding the details of the requirements together. The collaboration demanded by BDD, and the scenarios that are the output of the collaboration (see </a><a href="#bookmark107" class="s15">Section 3.4, </a>Why stop now?<span class="p">), help to improve this situation.</span></p><h3 style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;line-height: 94%;text-align: left;">Changes regularly requested at the Sprint/feature reviews</h3><p style="padding-top: 12pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The iterative development concept of agile is based on the fact that you can only get real feedback for a feature when business stakeholders actually get to see it in action. This is why we implement the application in small increments and this is why we organize Sprint/feature reviews.</p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">While it is better to realize that the application is not doing exactly what it should at a Sprint review than realizing this after a two-year delivery cycle, fixing the application is still much more expensive than doing it right from the beginning. If you regularly discover changes during the review, you probably aren’t discovering the detailed requirements well enough.</p><p class="s37" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark45" class="s19">BDD supports the detailed requirement analysis in many ways. By focusing on examples, ambiguities can be recognized and cleared up (see </a><a href="#bookmark45" class="s15">Section 1.3, </a><a href="#bookmark45" class="s36">What about </a>testing?<a href="#bookmark46" class="s19">). Additionally, since scenarios document the specification in the ubiquitous language, misunderstandings are less likely (see </a><a href="#bookmark46" class="s15">Section 1.4, </a><a href="#bookmark46" class="s36">A language that is understood by </a>everyone<span class="p">).</span></p><h3 style="padding-top: 9pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">But my product owner never reads the scenarios</h3><p style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">A common situation is a product owner that never reads the scenarios. On closer inspection, this often turns out to be a symptom of a deeper problem.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Scenarios specify how the application should behave. If the product owner is collaborating in the creation of the scenarios, but does not seem to be using the <i><b>living documentation</b></i><a href="#bookmark51" class="s19">, you should check that they have access to the scenarios. Accessing files in source control is easy for developers, but is this how we want to publish our living documentation? Try to make it more accessible! There are tools available for converting plain-text feature files into a more readable form (see </a><a href="#bookmark51" class="s15">Section 1.5, </a><span class="s37">Living documentation</span>). Integrate the publishing process into the continuous integration pipeline and make the result easily accessible (by adding a link to the project dashboard, for example).</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">You might also need to consider how someone can find information within the living documentation. For instance, you might want to improve how you tag your scenarios, so that the information related to special topics can be easily found.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Even if you have an easy-to-access, nicely formatted document, it might take some time for the business to learn how to use it effectively. Be patient. Take time to regularly retrospect on how the living documentation is being used by the business and what changes might make it more useful.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 12pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">Gaspar’s story: When I first used Wikipedia</h2><p class="s3" style="padding-top: 4pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I still remember how I felt when I first heard about Wikipedia. It was hard to believe that an encyclopedia that is free and can be edited by anyone could be useful. So, I was a bit cautious in the beginning and did not trust the information I read. Over time I’ve learned when I can rely on the Wikipedia articles and when I should check other sources as well.</p><p class="s3" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The situation with living documentation is similar to this. Everyone in the team has to learn how to use it and what questions can be answered with it.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Maybe more information is needed, such as an automation trace or a scenario change report. Perhaps a modified structure would help, such as organizing feature files hierarchically. Or possibly a different tagging policy, identifying the release that a particular behaviour was delivered in. Almost anything this is possible, you just need to talk together ;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l41"><ol id="l42"><li><h2 style="padding-top: 5pt;padding-left: 35pt;text-indent: -29pt;text-align: left;"><a name="bookmark151">– What we just learned</a><a name="bookmark159">&zwnj;</a></h2></li></ol></ol><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">BDD depends on collaboration. In this chapter we’ve emphasized how important it is to get the business involved in the BDD approach and looked at why this is sometimes difficult. We present some tips based on our experience of working with organizations adopting BDD, some of which may work for you.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">The information presented in this chapter is broadly applicable, but you should also make use of other sources of experience within the software development community.  User groups and  conferences are good places  to  meet likeminded individuals and have in-depth, face-to-face conversations.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We will discuss the structure and content of good living documentation in detail in</p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark160" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Formulation</a>⁴⁸<span style=" color: #000;">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_073.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a name="bookmark160"><span class="s20">⁴⁸</span></a>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Formulation</i><a href="http://bddbooks.com/formulation" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/formulation</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark161">What’s next</a><a name="bookmark165">&zwnj;</a></h1><p style="padding-top: 15pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">You’ve made it to the end. Congratulations!</p><p style="padding-top: 6pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="mailto:feedback@bddbooks.com" class="s19" target="_blank">Thanks for reading this book – we’d love to hear what you thought about the book. If you have any suggestions, comments or a good story about your experiences, please write to us at feedback@bddbooks.com.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark162">Where are we now?</a><a name="bookmark166">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">In this book we’ve covered the first part of the BDD approach: Discovery. We’ve stressed the importance of collaboration, described workshops and techniques that can help your teams reduce misunderstandings, and illustrated this with our own experience in the software industry.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Our goal in writing this book was that it would be useful to everyone involved in the specification and delivery of software. So, please encourage the rest of your team to read it – it won’t take long.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark163">What’s more is there?</a><a name="bookmark167">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">This book covers the Discovery part of the BDD approach, but there’s more to BDD than we have covered.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">We haven’t talked about the process of formulation (turning examples into scenarios) or other challenges you will face when working with large specifications. This will be covered (using Gherkin) in <a href="#bookmark168" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Formulation</a><span style=" color: #009;">⁴⁹</span>.</p><p style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">Nor have we discussed test automation, which is often a major motivation for orga- nizations looking to adopt BDD. We’ll cover automating scenarios using SpecFlow in <a href="#bookmark169" style=" color: black; font-family:&quot;Times New Roman&quot;, serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;">The BDD Books: Automation with SpecFlow</a><span style=" color: #009;">⁵⁰</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="211" height="1" alt="image" src="Image_074.png"/></span></p><p class="s23" style="padding-top: 1pt;padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a name="bookmark168"><span class="s20">⁴⁹</span></a>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Formulation</i><a href="http://bddbooks.com/formulation" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/formulation</span>.<a name="bookmark169">&zwnj;</a></p><p class="s23" style="padding-left: 21pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s20">⁵⁰</span>Nagy, Gáspár, and Seb Rose. <i>The BDD Books: Automation with SpecFlow</i><a href="http://bddbooks.com/specflow" class="s32" target="_blank">. In preparation. </a><span style=" color: #009;">http://bddbooks.com/specflow</span>.</p><p class="s20" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;">What’s next <span class="p">86</span></p><h2 style="padding-top: 16pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a name="bookmark164">How else we can help</a><a name="bookmark170">&zwnj;</a></h2><p style="padding-top: 17pt;padding-left: 6pt;text-indent: 0pt;text-align: justify;"><a href="mailto:services@bddbooks.com" class="s19" target="_blank">Both authors develop and deliver training and coaching for organizations worldwide. If you would like to talk about the services we can provide, please get in touch at services@bddbooks.com.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark171">Index</a><a name="bookmark172">&zwnj;</a></h1><p class="s21" style="padding-top: 15pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">A</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">acceptance criteria, 13, 37, 39, 50-51, 57, 78<i>; see also rule</i></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">acceptance test-driven development (ATDD), 5, 8 action<i>; see example</i></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">assumption, 13, 36-37</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">B</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">backlog refinement, 26, 61-62</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">behaviour driven development (BDD), 3-8, 10-23, 27, 45, 47, 51, 54-57, 60-62, 64, 66-67,</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">70-84, 86-87</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">business analyst, 5, 16, 20, 51, 57-58, 75, 83</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">business rule, 13, 34, 37, 50-51, 54, 57<i>; see also rule</i></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">business team, 5, 22, 78</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">C</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">classification tree method, 49</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">collaboration, 3-6, 22, 28, 40, 55, 68, 74-75, 77-80, 82, 84-87</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">context<i>; see example </i>continuous delivery (CD), 80-81 continuous deployment, 81</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">counter example, 33</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">coverage, 49, 72, 83</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">cycle time, 3, 75</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">D</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">deadline, 82</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">defect, 17, 80, 83</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">deliberate discovery, 36</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">delivery team, 3, 5, 36, 49-50, 64, 75, 77</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">developer, 3, 5, 10, 12, 15-16, 22, 27, 41, 48, 55, 58, 60, 64, 68, 75-77, 84-85</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">discovery workshop, 26</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">domain-driven design (DDD), 11, 19</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">E</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">equivalence classes, 49</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">estimation, 71, 82</p><p class="s18" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">example<span class="p">, 7, 11-14, 17, 20, 22-23, 26-28, 31, 33-34, 36-40, 45-51, 53-55, 57-58, 61-68, 70-</span></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">72, 77-78, 82, 84, 87</p><p style="padding-left: 8pt;text-indent: 0pt;text-align: left;">action, 13, 45-46, 54</p><p style="padding-left: 8pt;text-indent: 0pt;text-align: left;">context, 13, 45-46, 54</p><p style="padding-left: 8pt;text-indent: 0pt;text-align: left;">outcome, 13, 45-46, 49, 54, 62</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">example mapping, 26, 28, 36-37, 39, 44, 51, 62-63, 67-68, 71, 78-79</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">expectation, 19, 45, 72</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">exploratory testing, 16-17, 22, 60</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">F</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">facilitator, 39, 49, 68</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">feedback, 8, 10-12, 16, 21-22, 40, 44, 59, 61-62, 65-66, 77, 79, 84, 87</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">formulation, 14, 20-22, 47, 51, 58, 63-64, 67, 71, 78, 87</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">functional breakdown, 61, 64, 81-82</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">functionality, 16, 22, 47-48, 50, 71, 80</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">G</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">gherkin, 7, 20, 87</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">given/when/then, 7, 11, 27, 38, 58</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">grooming, 26, 61<i>; see also backlog refinement</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">H</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">horizontal slicing, 81-82</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">I</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">implementation, 12, 16, 19, 58-60, 63, 65, 67-68, 71, 79, 81</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">iterative, 8, 15, 61, 84</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">K</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">keyword, 11, 20</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">L</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">living documentation, 6, 19-21, 72-73, 85-86</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">M</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">maintainability, 4, 17, 23</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">misunderstanding, 10, 13, 17, 20, 22, 48, 66, 79, 84, 87</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">O</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">outcome<i>; see example</i></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">P</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">performance, 60, 80</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">persona, 28, 31</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">product backlog refinement, 26</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Q</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">question, 32-33, 36-37, 42-44, 62, 68, 79</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">R</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">readability, 73-74</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">refactoring, 14-15</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">remote requirement workshop, 68</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">requirement, 3, 5, 8, 10-13, 17, 22, 36-37, 39-41, 44, 47-51, 54, 57, 59, 61-62, 68, 71-74,</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">78-80, 83-84<i>; see also rule</i></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">requirement analysis, 80, 84</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">requirement workshop, 13, 25-26, 28, 36-37, 39, 41-42, 44, 47, 49, 51, 54-55, 57, 62, 66-</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">68, 79</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">responsibility, 17, 58</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">retrospect, 61, 74, 85<i>; see also sprint review</i></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">review, 20-21, 58-59, 64, 67, 79</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">role, 5, 17, 27, 39, 41, 55, 58, 75</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">rule, 13, 30-31, 34, 36-39, 46-48, 50-54, 57-58, 68, 71</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">S</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">scenario, 11-16, 19-20, 22, 38, 47, 51, 55, 58-68, 71-73, 77-85, 87</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">script, 10</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">scrum, 8, 28, 55, 61-64, 66-67, 74, 78, 81</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">shared ownership, 42</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">specification, 5-6, 22, 50-51, 71-72, 79-80, 83-84, 87</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">specification by example, 4, 8, 11, 50, 76</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">specification workshop, 26</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">sprint review, 61, 66, 78-79, 84</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">story refinement, 26</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">structured conversation, 13, 25-44, 47, 51, 58, 62-63, 68</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">T</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">technical stories, 82</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">test-driven approach, 67</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">test-driven development (TDD), 8, 10, 14-15, 60</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">tester-only bdd, 76-77</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">testing quadrants, 60</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">three amigos, 26, 39, 41, 58</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">transparency, 65</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">U</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">ubiquitous language, 19, 21-22, 84</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">user story, 8, 13-14, 17, 26-27, 30, 37-39, 43, 50-51, 57-58, 61, 63-68, 80-82</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">V</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">vertical slicing, 81</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">W</p><p style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">work in progress (WIP), 66-67</p></body></html>
